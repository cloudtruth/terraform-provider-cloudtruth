/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ctapi

import (
	"encoding/json"
	"fmt"
)

// ParameterRuleTypeEnum the model 'ParameterRuleTypeEnum'
type ParameterRuleTypeEnum string

// List of ParameterRuleTypeEnum
const (
	PARAMETERRULETYPEENUM_MIN     ParameterRuleTypeEnum = "min"
	PARAMETERRULETYPEENUM_MAX     ParameterRuleTypeEnum = "max"
	PARAMETERRULETYPEENUM_MIN_LEN ParameterRuleTypeEnum = "min_len"
	PARAMETERRULETYPEENUM_MAX_LEN ParameterRuleTypeEnum = "max_len"
	PARAMETERRULETYPEENUM_REGEX   ParameterRuleTypeEnum = "regex"
)

// All allowed values of ParameterRuleTypeEnum enum
var AllowedParameterRuleTypeEnumEnumValues = []ParameterRuleTypeEnum{
	"min",
	"max",
	"min_len",
	"max_len",
	"regex",
}

func (v *ParameterRuleTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ParameterRuleTypeEnum(value)
	for _, existing := range AllowedParameterRuleTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ParameterRuleTypeEnum", value)
}

// NewParameterRuleTypeEnumFromValue returns a pointer to a valid ParameterRuleTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewParameterRuleTypeEnumFromValue(v string) (*ParameterRuleTypeEnum, error) {
	ev := ParameterRuleTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ParameterRuleTypeEnum: valid values are %v", v, AllowedParameterRuleTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ParameterRuleTypeEnum) IsValid() bool {
	for _, existing := range AllowedParameterRuleTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ParameterRuleTypeEnum value
func (v ParameterRuleTypeEnum) Ptr() *ParameterRuleTypeEnum {
	return &v
}

type NullableParameterRuleTypeEnum struct {
	value *ParameterRuleTypeEnum
	isSet bool
}

func (v NullableParameterRuleTypeEnum) Get() *ParameterRuleTypeEnum {
	return v.value
}

func (v *NullableParameterRuleTypeEnum) Set(val *ParameterRuleTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterRuleTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterRuleTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterRuleTypeEnum(val *ParameterRuleTypeEnum) *NullableParameterRuleTypeEnum {
	return &NullableParameterRuleTypeEnum{value: val, isSet: true}
}

func (v NullableParameterRuleTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterRuleTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
