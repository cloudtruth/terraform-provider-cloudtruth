/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ctapi

import (
	"encoding/json"
	"time"
)

// PatchedProject struct for PatchedProject
type PatchedProject struct {
	Url *string `json:"url,omitempty"`
	// A unique identifier for the project.
	Id *string `json:"id,omitempty"`
	// The project name.
	Name *string `json:"name,omitempty"`
	// A description of the project.  You may find it helpful to document how this project is used to assist others when they need to maintain software that uses this content.
	Description *string `json:"description,omitempty"`
	// This is the opposite of `depends_on`, see that field for more details.
	Dependents *[]string `json:"dependents,omitempty"`
	// Project dependencies allow projects to be used for shared configuration, for example a database used by many applications needs to advertise its port number.  Projects can depend on another project which will add the parameters from the parent project into the current project.  All of the parameter names between the two projects must be unique.  When retrieving values or rendering templates, all of the parameters from the parent project will also be available in the current project.
	DependsOn  NullableString `json:"depends_on,omitempty"`
	Pushes     *[]AwsPush     `json:"pushes,omitempty"`
	CreatedAt  *time.Time     `json:"created_at,omitempty"`
	ModifiedAt *time.Time     `json:"modified_at,omitempty"`
}

// NewPatchedProject instantiates a new PatchedProject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedProject() *PatchedProject {
	this := PatchedProject{}
	return &this
}

// NewPatchedProjectWithDefaults instantiates a new PatchedProject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedProjectWithDefaults() *PatchedProject {
	this := PatchedProject{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *PatchedProject) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedProject) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *PatchedProject) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *PatchedProject) SetUrl(v string) {
	o.Url = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PatchedProject) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedProject) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PatchedProject) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PatchedProject) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedProject) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedProject) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedProject) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedProject) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PatchedProject) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedProject) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PatchedProject) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PatchedProject) SetDescription(v string) {
	o.Description = &v
}

// GetDependents returns the Dependents field value if set, zero value otherwise.
func (o *PatchedProject) GetDependents() []string {
	if o == nil || o.Dependents == nil {
		var ret []string
		return ret
	}
	return *o.Dependents
}

// GetDependentsOk returns a tuple with the Dependents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedProject) GetDependentsOk() (*[]string, bool) {
	if o == nil || o.Dependents == nil {
		return nil, false
	}
	return o.Dependents, true
}

// HasDependents returns a boolean if a field has been set.
func (o *PatchedProject) HasDependents() bool {
	if o != nil && o.Dependents != nil {
		return true
	}

	return false
}

// SetDependents gets a reference to the given []string and assigns it to the Dependents field.
func (o *PatchedProject) SetDependents(v []string) {
	o.Dependents = &v
}

// GetDependsOn returns the DependsOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedProject) GetDependsOn() string {
	if o == nil || o.DependsOn.Get() == nil {
		var ret string
		return ret
	}
	return *o.DependsOn.Get()
}

// GetDependsOnOk returns a tuple with the DependsOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedProject) GetDependsOnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DependsOn.Get(), o.DependsOn.IsSet()
}

// HasDependsOn returns a boolean if a field has been set.
func (o *PatchedProject) HasDependsOn() bool {
	if o != nil && o.DependsOn.IsSet() {
		return true
	}

	return false
}

// SetDependsOn gets a reference to the given NullableString and assigns it to the DependsOn field.
func (o *PatchedProject) SetDependsOn(v string) {
	o.DependsOn.Set(&v)
}

// SetDependsOnNil sets the value for DependsOn to be an explicit nil
func (o *PatchedProject) SetDependsOnNil() {
	o.DependsOn.Set(nil)
}

// UnsetDependsOn ensures that no value is present for DependsOn, not even an explicit nil
func (o *PatchedProject) UnsetDependsOn() {
	o.DependsOn.Unset()
}

// GetPushes returns the Pushes field value if set, zero value otherwise.
func (o *PatchedProject) GetPushes() []AwsPush {
	if o == nil || o.Pushes == nil {
		var ret []AwsPush
		return ret
	}
	return *o.Pushes
}

// GetPushesOk returns a tuple with the Pushes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedProject) GetPushesOk() (*[]AwsPush, bool) {
	if o == nil || o.Pushes == nil {
		return nil, false
	}
	return o.Pushes, true
}

// HasPushes returns a boolean if a field has been set.
func (o *PatchedProject) HasPushes() bool {
	if o != nil && o.Pushes != nil {
		return true
	}

	return false
}

// SetPushes gets a reference to the given []AwsPush and assigns it to the Pushes field.
func (o *PatchedProject) SetPushes(v []AwsPush) {
	o.Pushes = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PatchedProject) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedProject) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PatchedProject) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PatchedProject) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *PatchedProject) GetModifiedAt() time.Time {
	if o == nil || o.ModifiedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedProject) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || o.ModifiedAt == nil {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *PatchedProject) HasModifiedAt() bool {
	if o != nil && o.ModifiedAt != nil {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *PatchedProject) SetModifiedAt(v time.Time) {
	o.ModifiedAt = &v
}

func (o PatchedProject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Dependents != nil {
		toSerialize["dependents"] = o.Dependents
	}
	if o.DependsOn.IsSet() {
		toSerialize["depends_on"] = o.DependsOn.Get()
	}
	if o.Pushes != nil {
		toSerialize["pushes"] = o.Pushes
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.ModifiedAt != nil {
		toSerialize["modified_at"] = o.ModifiedAt
	}
	return json.Marshal(toSerialize)
}

type NullablePatchedProject struct {
	value *PatchedProject
	isSet bool
}

func (v NullablePatchedProject) Get() *PatchedProject {
	return v.value
}

func (v *NullablePatchedProject) Set(val *PatchedProject) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedProject) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedProject(val *PatchedProject) *NullablePatchedProject {
	return &NullablePatchedProject{value: val, isSet: true}
}

func (v NullablePatchedProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
