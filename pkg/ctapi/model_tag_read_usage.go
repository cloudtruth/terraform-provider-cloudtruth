/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ctapi

import (
	"encoding/json"
	"time"
)

// TagReadUsage The read usage details of a tag.
type TagReadUsage struct {
	// The last time a configuration was retrieved with this tag.
	LastRead NullableTime `json:"last_read"`
	// The last user (id) to use this tag to read configuration.
	LastReadBy *string `json:"last_read_by,omitempty"`
	// The number of times the tag has been used to read configuration.
	TotalReads int32 `json:"total_reads"`
}

// NewTagReadUsage instantiates a new TagReadUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagReadUsage(lastRead NullableTime, totalReads int32) *TagReadUsage {
	this := TagReadUsage{}
	this.LastRead = lastRead
	this.TotalReads = totalReads
	return &this
}

// NewTagReadUsageWithDefaults instantiates a new TagReadUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagReadUsageWithDefaults() *TagReadUsage {
	this := TagReadUsage{}
	return &this
}

// GetLastRead returns the LastRead field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *TagReadUsage) GetLastRead() time.Time {
	if o == nil || o.LastRead.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastRead.Get()
}

// GetLastReadOk returns a tuple with the LastRead field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagReadUsage) GetLastReadOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastRead.Get(), o.LastRead.IsSet()
}

// SetLastRead sets field value
func (o *TagReadUsage) SetLastRead(v time.Time) {
	o.LastRead.Set(&v)
}

// GetLastReadBy returns the LastReadBy field value if set, zero value otherwise.
func (o *TagReadUsage) GetLastReadBy() string {
	if o == nil || o.LastReadBy == nil {
		var ret string
		return ret
	}
	return *o.LastReadBy
}

// GetLastReadByOk returns a tuple with the LastReadBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagReadUsage) GetLastReadByOk() (*string, bool) {
	if o == nil || o.LastReadBy == nil {
		return nil, false
	}
	return o.LastReadBy, true
}

// HasLastReadBy returns a boolean if a field has been set.
func (o *TagReadUsage) HasLastReadBy() bool {
	if o != nil && o.LastReadBy != nil {
		return true
	}

	return false
}

// SetLastReadBy gets a reference to the given string and assigns it to the LastReadBy field.
func (o *TagReadUsage) SetLastReadBy(v string) {
	o.LastReadBy = &v
}

// GetTotalReads returns the TotalReads field value
func (o *TagReadUsage) GetTotalReads() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalReads
}

// GetTotalReadsOk returns a tuple with the TotalReads field value
// and a boolean to check if the value has been set.
func (o *TagReadUsage) GetTotalReadsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalReads, true
}

// SetTotalReads sets field value
func (o *TagReadUsage) SetTotalReads(v int32) {
	o.TotalReads = v
}

func (o TagReadUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["last_read"] = o.LastRead.Get()
	}
	if o.LastReadBy != nil {
		toSerialize["last_read_by"] = o.LastReadBy
	}
	if true {
		toSerialize["total_reads"] = o.TotalReads
	}
	return json.Marshal(toSerialize)
}

type NullableTagReadUsage struct {
	value *TagReadUsage
	isSet bool
}

func (v NullableTagReadUsage) Get() *TagReadUsage {
	return v.value
}

func (v *NullableTagReadUsage) Set(val *TagReadUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableTagReadUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableTagReadUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagReadUsage(val *TagReadUsage) *NullableTagReadUsage {
	return &NullableTagReadUsage{value: val, isSet: true}
}

func (v NullableTagReadUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagReadUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
