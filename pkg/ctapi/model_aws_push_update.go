/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ctapi

import (
	"encoding/json"
)

// AwsPushUpdate Update a push.  The `region` and `service` cannot be changed on an existing push.
type AwsPushUpdate struct {
	// The action name.
	Name string `json:"name"`
	// The optional description for the action.
	Description *string `json:"description,omitempty"`
	// Projects that are included in the push.
	Projects []string `json:"projects"`
	// Tags are used to select parameters by environment from the projects included in the push.  You cannot have two tags from the same environment in the same push.
	Tags []string `json:"tags"`
	// Defines a path through the integration to the location where values will be pushed.  The following mustache-style substitutions can be used in the string:    - ``{{ environment }}`` to insert the environment name   - ``{{ parameter }}`` to insert the parameter name   - ``{{ project }}`` to insert the project name   - ``{{ push }}`` to insert the push name   - ``{{ tag }}`` to insert the tag name  We recommend that you use project, environment, and parameter at a minimum to disambiguate your pushed resource identifiers.  If you include multiple projects in the push, the `project` substitution is required.  If you include multiple tags from different environments in the push, the `environment` substitution is required.  If you include multiple tags from the same environment in the push, the `tag` substitution is required.  In all cases, the `parameter` substitution is always required.
	Resource string `json:"resource"`
}

// NewAwsPushUpdate instantiates a new AwsPushUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsPushUpdate(name string, projects []string, tags []string, resource string) *AwsPushUpdate {
	this := AwsPushUpdate{}
	this.Name = name
	this.Projects = projects
	this.Tags = tags
	this.Resource = resource
	return &this
}

// NewAwsPushUpdateWithDefaults instantiates a new AwsPushUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsPushUpdateWithDefaults() *AwsPushUpdate {
	this := AwsPushUpdate{}
	return &this
}

// GetName returns the Name field value
func (o *AwsPushUpdate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AwsPushUpdate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AwsPushUpdate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AwsPushUpdate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsPushUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AwsPushUpdate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AwsPushUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetProjects returns the Projects field value
func (o *AwsPushUpdate) GetProjects() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value
// and a boolean to check if the value has been set.
func (o *AwsPushUpdate) GetProjectsOk() (*[]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Projects, true
}

// SetProjects sets field value
func (o *AwsPushUpdate) SetProjects(v []string) {
	o.Projects = v
}

// GetTags returns the Tags field value
func (o *AwsPushUpdate) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *AwsPushUpdate) GetTagsOk() (*[]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tags, true
}

// SetTags sets field value
func (o *AwsPushUpdate) SetTags(v []string) {
	o.Tags = v
}

// GetResource returns the Resource field value
func (o *AwsPushUpdate) GetResource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
func (o *AwsPushUpdate) GetResourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resource, true
}

// SetResource sets field value
func (o *AwsPushUpdate) SetResource(v string) {
	o.Resource = v
}

func (o AwsPushUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["projects"] = o.Projects
	}
	if true {
		toSerialize["tags"] = o.Tags
	}
	if true {
		toSerialize["resource"] = o.Resource
	}
	return json.Marshal(toSerialize)
}

type NullableAwsPushUpdate struct {
	value *AwsPushUpdate
	isSet bool
}

func (v NullableAwsPushUpdate) Get() *AwsPushUpdate {
	return v.value
}

func (v *NullableAwsPushUpdate) Set(val *AwsPushUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsPushUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsPushUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsPushUpdate(val *AwsPushUpdate) *NullableAwsPushUpdate {
	return &NullableAwsPushUpdate{value: val, isSet: true}
}

func (v NullableAwsPushUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsPushUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
