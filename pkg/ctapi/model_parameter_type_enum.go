/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ctapi

import (
	"encoding/json"
	"fmt"
)

// ParameterTypeEnum the model 'ParameterTypeEnum'
type ParameterTypeEnum string

// List of ParameterTypeEnum
const (
	PARAMETERTYPEENUM_STRING  ParameterTypeEnum = "string"
	PARAMETERTYPEENUM_INTEGER ParameterTypeEnum = "integer"
	PARAMETERTYPEENUM_BOOL    ParameterTypeEnum = "bool"
)

// All allowed values of ParameterTypeEnum enum
var AllowedParameterTypeEnumEnumValues = []ParameterTypeEnum{
	"string",
	"integer",
	"bool",
}

func (v *ParameterTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ParameterTypeEnum(value)
	for _, existing := range AllowedParameterTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ParameterTypeEnum", value)
}

// NewParameterTypeEnumFromValue returns a pointer to a valid ParameterTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewParameterTypeEnumFromValue(v string) (*ParameterTypeEnum, error) {
	ev := ParameterTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ParameterTypeEnum: valid values are %v", v, AllowedParameterTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ParameterTypeEnum) IsValid() bool {
	for _, existing := range AllowedParameterTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ParameterTypeEnum value
func (v ParameterTypeEnum) Ptr() *ParameterTypeEnum {
	return &v
}

type NullableParameterTypeEnum struct {
	value *ParameterTypeEnum
	isSet bool
}

func (v NullableParameterTypeEnum) Get() *ParameterTypeEnum {
	return v.value
}

func (v *NullableParameterTypeEnum) Set(val *ParameterTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterTypeEnum(val *ParameterTypeEnum) *NullableParameterTypeEnum {
	return &NullableParameterTypeEnum{value: val, isSet: true}
}

func (v NullableParameterTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
