/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
	"fmt"
)

// checks if the DiscoveredContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscoveredContent{}

// DiscoveredContent struct for DiscoveredContent
type DiscoveredContent struct {
	VenueId string `json:"venue_id"`
	VenueName string `json:"venue_name"`
	EnvironmentName string `json:"environment_name"`
	ProjectName string `json:"project_name"`
	ParameterName string `json:"parameter_name"`
}

type _DiscoveredContent DiscoveredContent

// NewDiscoveredContent instantiates a new DiscoveredContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscoveredContent(venueId string, venueName string, environmentName string, projectName string, parameterName string) *DiscoveredContent {
	this := DiscoveredContent{}
	this.VenueId = venueId
	this.VenueName = venueName
	this.EnvironmentName = environmentName
	this.ProjectName = projectName
	this.ParameterName = parameterName
	return &this
}

// NewDiscoveredContentWithDefaults instantiates a new DiscoveredContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscoveredContentWithDefaults() *DiscoveredContent {
	this := DiscoveredContent{}
	return &this
}

// GetVenueId returns the VenueId field value
func (o *DiscoveredContent) GetVenueId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VenueId
}

// GetVenueIdOk returns a tuple with the VenueId field value
// and a boolean to check if the value has been set.
func (o *DiscoveredContent) GetVenueIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VenueId, true
}

// SetVenueId sets field value
func (o *DiscoveredContent) SetVenueId(v string) {
	o.VenueId = v
}

// GetVenueName returns the VenueName field value
func (o *DiscoveredContent) GetVenueName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VenueName
}

// GetVenueNameOk returns a tuple with the VenueName field value
// and a boolean to check if the value has been set.
func (o *DiscoveredContent) GetVenueNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VenueName, true
}

// SetVenueName sets field value
func (o *DiscoveredContent) SetVenueName(v string) {
	o.VenueName = v
}

// GetEnvironmentName returns the EnvironmentName field value
func (o *DiscoveredContent) GetEnvironmentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentName
}

// GetEnvironmentNameOk returns a tuple with the EnvironmentName field value
// and a boolean to check if the value has been set.
func (o *DiscoveredContent) GetEnvironmentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentName, true
}

// SetEnvironmentName sets field value
func (o *DiscoveredContent) SetEnvironmentName(v string) {
	o.EnvironmentName = v
}

// GetProjectName returns the ProjectName field value
func (o *DiscoveredContent) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *DiscoveredContent) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *DiscoveredContent) SetProjectName(v string) {
	o.ProjectName = v
}

// GetParameterName returns the ParameterName field value
func (o *DiscoveredContent) GetParameterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParameterName
}

// GetParameterNameOk returns a tuple with the ParameterName field value
// and a boolean to check if the value has been set.
func (o *DiscoveredContent) GetParameterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParameterName, true
}

// SetParameterName sets field value
func (o *DiscoveredContent) SetParameterName(v string) {
	o.ParameterName = v
}

func (o DiscoveredContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscoveredContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["venue_id"] = o.VenueId
	toSerialize["venue_name"] = o.VenueName
	toSerialize["environment_name"] = o.EnvironmentName
	toSerialize["project_name"] = o.ProjectName
	toSerialize["parameter_name"] = o.ParameterName
	return toSerialize, nil
}

func (o *DiscoveredContent) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"venue_id",
		"venue_name",
		"environment_name",
		"project_name",
		"parameter_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDiscoveredContent := _DiscoveredContent{}

	err = json.Unmarshal(bytes, &varDiscoveredContent)

	if err != nil {
		return err
	}

	*o = DiscoveredContent(varDiscoveredContent)

	return err
}

type NullableDiscoveredContent struct {
	value *DiscoveredContent
	isSet bool
}

func (v NullableDiscoveredContent) Get() *DiscoveredContent {
	return v.value
}

func (v *NullableDiscoveredContent) Set(val *DiscoveredContent) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscoveredContent) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscoveredContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscoveredContent(val *DiscoveredContent) *NullableDiscoveredContent {
	return &NullableDiscoveredContent{value: val, isSet: true}
}

func (v NullableDiscoveredContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscoveredContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


