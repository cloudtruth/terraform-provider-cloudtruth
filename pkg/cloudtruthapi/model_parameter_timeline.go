/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ParameterTimeline type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParameterTimeline{}

// ParameterTimeline struct for ParameterTimeline
type ParameterTimeline struct {
	// The number of records in this response.
	Count int32 `json:"count"`
	// If present, additional history can be retrieved using this timestamp in the next call for the as_of query parameter value.
	NextAsOf *time.Time `json:"next_as_of,omitempty"`
	Results []ParameterTimelineEntry `json:"results"`
}

type _ParameterTimeline ParameterTimeline

// NewParameterTimeline instantiates a new ParameterTimeline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameterTimeline(count int32, results []ParameterTimelineEntry) *ParameterTimeline {
	this := ParameterTimeline{}
	this.Count = count
	this.Results = results
	return &this
}

// NewParameterTimelineWithDefaults instantiates a new ParameterTimeline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParameterTimelineWithDefaults() *ParameterTimeline {
	this := ParameterTimeline{}
	return &this
}

// GetCount returns the Count field value
func (o *ParameterTimeline) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *ParameterTimeline) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *ParameterTimeline) SetCount(v int32) {
	o.Count = v
}

// GetNextAsOf returns the NextAsOf field value if set, zero value otherwise.
func (o *ParameterTimeline) GetNextAsOf() time.Time {
	if o == nil || IsNil(o.NextAsOf) {
		var ret time.Time
		return ret
	}
	return *o.NextAsOf
}

// GetNextAsOfOk returns a tuple with the NextAsOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterTimeline) GetNextAsOfOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NextAsOf) {
		return nil, false
	}
	return o.NextAsOf, true
}

// HasNextAsOf returns a boolean if a field has been set.
func (o *ParameterTimeline) HasNextAsOf() bool {
	if o != nil && !IsNil(o.NextAsOf) {
		return true
	}

	return false
}

// SetNextAsOf gets a reference to the given time.Time and assigns it to the NextAsOf field.
func (o *ParameterTimeline) SetNextAsOf(v time.Time) {
	o.NextAsOf = &v
}

// GetResults returns the Results field value
func (o *ParameterTimeline) GetResults() []ParameterTimelineEntry {
	if o == nil {
		var ret []ParameterTimelineEntry
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *ParameterTimeline) GetResultsOk() ([]ParameterTimelineEntry, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *ParameterTimeline) SetResults(v []ParameterTimelineEntry) {
	o.Results = v
}

func (o ParameterTimeline) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParameterTimeline) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	if !IsNil(o.NextAsOf) {
		toSerialize["next_as_of"] = o.NextAsOf
	}
	toSerialize["results"] = o.Results
	return toSerialize, nil
}

func (o *ParameterTimeline) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"results",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParameterTimeline := _ParameterTimeline{}

	err = json.Unmarshal(bytes, &varParameterTimeline)

	if err != nil {
		return err
	}

	*o = ParameterTimeline(varParameterTimeline)

	return err
}

type NullableParameterTimeline struct {
	value *ParameterTimeline
	isSet bool
}

func (v NullableParameterTimeline) Get() *ParameterTimeline {
	return v.value
}

func (v *NullableParameterTimeline) Set(val *ParameterTimeline) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterTimeline) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterTimeline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterTimeline(val *ParameterTimeline) *NullableParameterTimeline {
	return &NullableParameterTimeline{value: val, isSet: true}
}

func (v NullableParameterTimeline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterTimeline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


