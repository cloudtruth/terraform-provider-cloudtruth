/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ParameterRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParameterRule{}

// ParameterRule A type of `ModelSerializer` that uses hyperlinked relationships with compound keys instead of primary key relationships.  Specifically:  * A 'url' field is included instead of the 'id' field. * Relationships to other instances are hyperlinks, instead of primary keys.  NOTE: this only works with DRF 3.1.0 and above.
type ParameterRule struct {
	// The URL for the parameter rule.
	Url string `json:"url"`
	Id string `json:"id"`
	LedgerId string `json:"ledger_id"`
	// The parameter this rule is for.
	Parameter string `json:"parameter"`
	Type ParameterRuleTypeEnum `json:"type"`
	Constraint string `json:"constraint"`
	CreatedAt time.Time `json:"created_at"`
	ModifiedAt NullableTime `json:"modified_at"`
}

type _ParameterRule ParameterRule

// NewParameterRule instantiates a new ParameterRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameterRule(url string, id string, ledgerId string, parameter string, type_ ParameterRuleTypeEnum, constraint string, createdAt time.Time, modifiedAt NullableTime) *ParameterRule {
	this := ParameterRule{}
	this.Url = url
	this.Id = id
	this.LedgerId = ledgerId
	this.Parameter = parameter
	this.Type = type_
	this.Constraint = constraint
	this.CreatedAt = createdAt
	this.ModifiedAt = modifiedAt
	return &this
}

// NewParameterRuleWithDefaults instantiates a new ParameterRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParameterRuleWithDefaults() *ParameterRule {
	this := ParameterRule{}
	return &this
}

// GetUrl returns the Url field value
func (o *ParameterRule) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ParameterRule) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ParameterRule) SetUrl(v string) {
	o.Url = v
}

// GetId returns the Id field value
func (o *ParameterRule) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ParameterRule) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ParameterRule) SetId(v string) {
	o.Id = v
}

// GetLedgerId returns the LedgerId field value
func (o *ParameterRule) GetLedgerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LedgerId
}

// GetLedgerIdOk returns a tuple with the LedgerId field value
// and a boolean to check if the value has been set.
func (o *ParameterRule) GetLedgerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LedgerId, true
}

// SetLedgerId sets field value
func (o *ParameterRule) SetLedgerId(v string) {
	o.LedgerId = v
}

// GetParameter returns the Parameter field value
func (o *ParameterRule) GetParameter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Parameter
}

// GetParameterOk returns a tuple with the Parameter field value
// and a boolean to check if the value has been set.
func (o *ParameterRule) GetParameterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Parameter, true
}

// SetParameter sets field value
func (o *ParameterRule) SetParameter(v string) {
	o.Parameter = v
}

// GetType returns the Type field value
func (o *ParameterRule) GetType() ParameterRuleTypeEnum {
	if o == nil {
		var ret ParameterRuleTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ParameterRule) GetTypeOk() (*ParameterRuleTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ParameterRule) SetType(v ParameterRuleTypeEnum) {
	o.Type = v
}

// GetConstraint returns the Constraint field value
func (o *ParameterRule) GetConstraint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Constraint
}

// GetConstraintOk returns a tuple with the Constraint field value
// and a boolean to check if the value has been set.
func (o *ParameterRule) GetConstraintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Constraint, true
}

// SetConstraint sets field value
func (o *ParameterRule) SetConstraint(v string) {
	o.Constraint = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ParameterRule) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ParameterRule) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ParameterRule) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetModifiedAt returns the ModifiedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *ParameterRule) GetModifiedAt() time.Time {
	if o == nil || o.ModifiedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.ModifiedAt.Get()
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParameterRule) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedAt.Get(), o.ModifiedAt.IsSet()
}

// SetModifiedAt sets field value
func (o *ParameterRule) SetModifiedAt(v time.Time) {
	o.ModifiedAt.Set(&v)
}

func (o ParameterRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParameterRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["id"] = o.Id
	toSerialize["ledger_id"] = o.LedgerId
	toSerialize["parameter"] = o.Parameter
	toSerialize["type"] = o.Type
	toSerialize["constraint"] = o.Constraint
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["modified_at"] = o.ModifiedAt.Get()
	return toSerialize, nil
}

func (o *ParameterRule) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"id",
		"ledger_id",
		"parameter",
		"type",
		"constraint",
		"created_at",
		"modified_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParameterRule := _ParameterRule{}

	err = json.Unmarshal(bytes, &varParameterRule)

	if err != nil {
		return err
	}

	*o = ParameterRule(varParameterRule)

	return err
}

type NullableParameterRule struct {
	value *ParameterRule
	isSet bool
}

func (v NullableParameterRule) Get() *ParameterRule {
	return v.value
}

func (v *NullableParameterRule) Set(val *ParameterRule) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterRule) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterRule(val *ParameterRule) *NullableParameterRule {
	return &NullableParameterRule{value: val, isSet: true}
}

func (v NullableParameterRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


