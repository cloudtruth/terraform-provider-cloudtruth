/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
	"time"
)

// checks if the ServiceAccountRekeyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceAccountRekeyRequest{}

// ServiceAccountRekeyRequest struct for ServiceAccountRekeyRequest
type ServiceAccountRekeyRequest struct {
	// The date and time the previous API key will expire.
	ExpireAt NullableTime `json:"expire_at,omitempty"`
}

// NewServiceAccountRekeyRequest instantiates a new ServiceAccountRekeyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceAccountRekeyRequest() *ServiceAccountRekeyRequest {
	this := ServiceAccountRekeyRequest{}
	return &this
}

// NewServiceAccountRekeyRequestWithDefaults instantiates a new ServiceAccountRekeyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceAccountRekeyRequestWithDefaults() *ServiceAccountRekeyRequest {
	this := ServiceAccountRekeyRequest{}
	return &this
}

// GetExpireAt returns the ExpireAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceAccountRekeyRequest) GetExpireAt() time.Time {
	if o == nil || IsNil(o.ExpireAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpireAt.Get()
}

// GetExpireAtOk returns a tuple with the ExpireAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceAccountRekeyRequest) GetExpireAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpireAt.Get(), o.ExpireAt.IsSet()
}

// HasExpireAt returns a boolean if a field has been set.
func (o *ServiceAccountRekeyRequest) HasExpireAt() bool {
	if o != nil && o.ExpireAt.IsSet() {
		return true
	}

	return false
}

// SetExpireAt gets a reference to the given NullableTime and assigns it to the ExpireAt field.
func (o *ServiceAccountRekeyRequest) SetExpireAt(v time.Time) {
	o.ExpireAt.Set(&v)
}
// SetExpireAtNil sets the value for ExpireAt to be an explicit nil
func (o *ServiceAccountRekeyRequest) SetExpireAtNil() {
	o.ExpireAt.Set(nil)
}

// UnsetExpireAt ensures that no value is present for ExpireAt, not even an explicit nil
func (o *ServiceAccountRekeyRequest) UnsetExpireAt() {
	o.ExpireAt.Unset()
}

func (o ServiceAccountRekeyRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceAccountRekeyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ExpireAt.IsSet() {
		toSerialize["expire_at"] = o.ExpireAt.Get()
	}
	return toSerialize, nil
}

type NullableServiceAccountRekeyRequest struct {
	value *ServiceAccountRekeyRequest
	isSet bool
}

func (v NullableServiceAccountRekeyRequest) Get() *ServiceAccountRekeyRequest {
	return v.value
}

func (v *NullableServiceAccountRekeyRequest) Set(val *ServiceAccountRekeyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceAccountRekeyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceAccountRekeyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceAccountRekeyRequest(val *ServiceAccountRekeyRequest) *NullableServiceAccountRekeyRequest {
	return &NullableServiceAccountRekeyRequest{value: val, isSet: true}
}

func (v NullableServiceAccountRekeyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceAccountRekeyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


