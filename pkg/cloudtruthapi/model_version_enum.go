/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
	"fmt"
)

// VersionEnum the model 'VersionEnum'
type VersionEnum int32

// List of VersionEnum
const (
	VERSIONENUM__1 VersionEnum = 1
	VERSIONENUM__2 VersionEnum = 2
	VERSIONENUM__3 VersionEnum = 3
	VERSIONENUM__4 VersionEnum = 4
)

// All allowed values of VersionEnum enum
var AllowedVersionEnumEnumValues = []VersionEnum{
	1,
	2,
	3,
	4,
}

func (v *VersionEnum) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VersionEnum(value)
	for _, existing := range AllowedVersionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VersionEnum", value)
}

// NewVersionEnumFromValue returns a pointer to a valid VersionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVersionEnumFromValue(v int32) (*VersionEnum, error) {
	ev := VersionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VersionEnum: valid values are %v", v, AllowedVersionEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VersionEnum) IsValid() bool {
	for _, existing := range AllowedVersionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VersionEnum value
func (v VersionEnum) Ptr() *VersionEnum {
	return &v
}

type NullableVersionEnum struct {
	value *VersionEnum
	isSet bool
}

func (v NullableVersionEnum) Get() *VersionEnum {
	return v.value
}

func (v *NullableVersionEnum) Set(val *VersionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionEnum(val *VersionEnum) *NullableVersionEnum {
	return &NullableVersionEnum{value: val, isSet: true}
}

func (v NullableVersionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

