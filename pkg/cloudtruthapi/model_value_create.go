/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ValueCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValueCreate{}

// ValueCreate A value for a parameter in a given environment.
type ValueCreate struct {
	// The environment this value is set in.
	Environment string `json:"environment"`
	// An external parameter leverages a CloudTruth integration to retrieve content on-demand from an external source.  When this is `false` the value is stored by CloudTruth and considered to be _internal_.  When this is `true`, the `external_fqn` field must be set.
	External *bool `json:"external,omitempty"`
	// The FQN, or Fully-Qualified Name, is the path through the integration to get to the desired content.  This must be present and reference a valid integration when the value is `external`.
	ExternalFqn *string `json:"external_fqn,omitempty"`
	// If the value is `external`, the content returned by the integration can be reduced by applying a JMESpath expression.  This is valid as long as the content is structured and of a supported format.  JMESpath expressions are supported on `json`, `yaml`, and `dotenv` content.
	ExternalFilter *string `json:"external_filter,omitempty"`
	// This is the content to use when resolving the Value for an internal non-secret, or when storing a secret.  This field cannot be specified when creating or updating an `external` value.
	InternalValue NullableString `json:"internal_value,omitempty"`
	// If `true`, apply template substitution rules to this value.  If `false`, this value is a literal value.  Note: secrets cannot be interpolated.
	Interpolated *bool `json:"interpolated,omitempty"`
}

type _ValueCreate ValueCreate

// NewValueCreate instantiates a new ValueCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValueCreate(environment string) *ValueCreate {
	this := ValueCreate{}
	this.Environment = environment
	return &this
}

// NewValueCreateWithDefaults instantiates a new ValueCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueCreateWithDefaults() *ValueCreate {
	this := ValueCreate{}
	return &this
}

// GetEnvironment returns the Environment field value
func (o *ValueCreate) GetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *ValueCreate) GetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *ValueCreate) SetEnvironment(v string) {
	o.Environment = v
}

// GetExternal returns the External field value if set, zero value otherwise.
func (o *ValueCreate) GetExternal() bool {
	if o == nil || IsNil(o.External) {
		var ret bool
		return ret
	}
	return *o.External
}

// GetExternalOk returns a tuple with the External field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueCreate) GetExternalOk() (*bool, bool) {
	if o == nil || IsNil(o.External) {
		return nil, false
	}
	return o.External, true
}

// HasExternal returns a boolean if a field has been set.
func (o *ValueCreate) HasExternal() bool {
	if o != nil && !IsNil(o.External) {
		return true
	}

	return false
}

// SetExternal gets a reference to the given bool and assigns it to the External field.
func (o *ValueCreate) SetExternal(v bool) {
	o.External = &v
}

// GetExternalFqn returns the ExternalFqn field value if set, zero value otherwise.
func (o *ValueCreate) GetExternalFqn() string {
	if o == nil || IsNil(o.ExternalFqn) {
		var ret string
		return ret
	}
	return *o.ExternalFqn
}

// GetExternalFqnOk returns a tuple with the ExternalFqn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueCreate) GetExternalFqnOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalFqn) {
		return nil, false
	}
	return o.ExternalFqn, true
}

// HasExternalFqn returns a boolean if a field has been set.
func (o *ValueCreate) HasExternalFqn() bool {
	if o != nil && !IsNil(o.ExternalFqn) {
		return true
	}

	return false
}

// SetExternalFqn gets a reference to the given string and assigns it to the ExternalFqn field.
func (o *ValueCreate) SetExternalFqn(v string) {
	o.ExternalFqn = &v
}

// GetExternalFilter returns the ExternalFilter field value if set, zero value otherwise.
func (o *ValueCreate) GetExternalFilter() string {
	if o == nil || IsNil(o.ExternalFilter) {
		var ret string
		return ret
	}
	return *o.ExternalFilter
}

// GetExternalFilterOk returns a tuple with the ExternalFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueCreate) GetExternalFilterOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalFilter) {
		return nil, false
	}
	return o.ExternalFilter, true
}

// HasExternalFilter returns a boolean if a field has been set.
func (o *ValueCreate) HasExternalFilter() bool {
	if o != nil && !IsNil(o.ExternalFilter) {
		return true
	}

	return false
}

// SetExternalFilter gets a reference to the given string and assigns it to the ExternalFilter field.
func (o *ValueCreate) SetExternalFilter(v string) {
	o.ExternalFilter = &v
}

// GetInternalValue returns the InternalValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ValueCreate) GetInternalValue() string {
	if o == nil || IsNil(o.InternalValue.Get()) {
		var ret string
		return ret
	}
	return *o.InternalValue.Get()
}

// GetInternalValueOk returns a tuple with the InternalValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ValueCreate) GetInternalValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InternalValue.Get(), o.InternalValue.IsSet()
}

// HasInternalValue returns a boolean if a field has been set.
func (o *ValueCreate) HasInternalValue() bool {
	if o != nil && o.InternalValue.IsSet() {
		return true
	}

	return false
}

// SetInternalValue gets a reference to the given NullableString and assigns it to the InternalValue field.
func (o *ValueCreate) SetInternalValue(v string) {
	o.InternalValue.Set(&v)
}
// SetInternalValueNil sets the value for InternalValue to be an explicit nil
func (o *ValueCreate) SetInternalValueNil() {
	o.InternalValue.Set(nil)
}

// UnsetInternalValue ensures that no value is present for InternalValue, not even an explicit nil
func (o *ValueCreate) UnsetInternalValue() {
	o.InternalValue.Unset()
}

// GetInterpolated returns the Interpolated field value if set, zero value otherwise.
func (o *ValueCreate) GetInterpolated() bool {
	if o == nil || IsNil(o.Interpolated) {
		var ret bool
		return ret
	}
	return *o.Interpolated
}

// GetInterpolatedOk returns a tuple with the Interpolated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueCreate) GetInterpolatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Interpolated) {
		return nil, false
	}
	return o.Interpolated, true
}

// HasInterpolated returns a boolean if a field has been set.
func (o *ValueCreate) HasInterpolated() bool {
	if o != nil && !IsNil(o.Interpolated) {
		return true
	}

	return false
}

// SetInterpolated gets a reference to the given bool and assigns it to the Interpolated field.
func (o *ValueCreate) SetInterpolated(v bool) {
	o.Interpolated = &v
}

func (o ValueCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValueCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["environment"] = o.Environment
	if !IsNil(o.External) {
		toSerialize["external"] = o.External
	}
	if !IsNil(o.ExternalFqn) {
		toSerialize["external_fqn"] = o.ExternalFqn
	}
	if !IsNil(o.ExternalFilter) {
		toSerialize["external_filter"] = o.ExternalFilter
	}
	if o.InternalValue.IsSet() {
		toSerialize["internal_value"] = o.InternalValue.Get()
	}
	if !IsNil(o.Interpolated) {
		toSerialize["interpolated"] = o.Interpolated
	}
	return toSerialize, nil
}

func (o *ValueCreate) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"environment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValueCreate := _ValueCreate{}

	err = json.Unmarshal(bytes, &varValueCreate)

	if err != nil {
		return err
	}

	*o = ValueCreate(varValueCreate)

	return err
}

type NullableValueCreate struct {
	value *ValueCreate
	isSet bool
}

func (v NullableValueCreate) Get() *ValueCreate {
	return v.value
}

func (v *NullableValueCreate) Set(val *ValueCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableValueCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableValueCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueCreate(val *ValueCreate) *NullableValueCreate {
	return &NullableValueCreate{value: val, isSet: true}
}

func (v NullableValueCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


