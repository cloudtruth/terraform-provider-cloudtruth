/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ImportCreateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportCreateResponse{}

// ImportCreateResponse struct for ImportCreateResponse
type ImportCreateResponse struct {
	// Project parameter values after import
	Parameter []ImportParameter `json:"parameter"`
}

type _ImportCreateResponse ImportCreateResponse

// NewImportCreateResponse instantiates a new ImportCreateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportCreateResponse(parameter []ImportParameter) *ImportCreateResponse {
	this := ImportCreateResponse{}
	this.Parameter = parameter
	return &this
}

// NewImportCreateResponseWithDefaults instantiates a new ImportCreateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportCreateResponseWithDefaults() *ImportCreateResponse {
	this := ImportCreateResponse{}
	return &this
}

// GetParameter returns the Parameter field value
func (o *ImportCreateResponse) GetParameter() []ImportParameter {
	if o == nil {
		var ret []ImportParameter
		return ret
	}

	return o.Parameter
}

// GetParameterOk returns a tuple with the Parameter field value
// and a boolean to check if the value has been set.
func (o *ImportCreateResponse) GetParameterOk() ([]ImportParameter, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parameter, true
}

// SetParameter sets field value
func (o *ImportCreateResponse) SetParameter(v []ImportParameter) {
	o.Parameter = v
}

func (o ImportCreateResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportCreateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["parameter"] = o.Parameter
	return toSerialize, nil
}

func (o *ImportCreateResponse) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"parameter",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportCreateResponse := _ImportCreateResponse{}

	err = json.Unmarshal(bytes, &varImportCreateResponse)

	if err != nil {
		return err
	}

	*o = ImportCreateResponse(varImportCreateResponse)

	return err
}

type NullableImportCreateResponse struct {
	value *ImportCreateResponse
	isSet bool
}

func (v NullableImportCreateResponse) Get() *ImportCreateResponse {
	return v.value
}

func (v *NullableImportCreateResponse) Set(val *ImportCreateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableImportCreateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableImportCreateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportCreateResponse(val *ImportCreateResponse) *NullableImportCreateResponse {
	return &NullableImportCreateResponse{value: val, isSet: true}
}

func (v NullableImportCreateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportCreateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


