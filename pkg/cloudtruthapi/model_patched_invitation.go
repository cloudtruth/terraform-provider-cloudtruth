/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
)

// PatchedInvitation struct for PatchedInvitation
type PatchedInvitation struct {
	Url *string `json:"url,omitempty"`
	// The unique identifier of an invitation.
	Id *string `json:"id,omitempty"`
	// The email address of the user to be invited.
	Email *string `json:"email,omitempty"`
	// The role that the user will have in the organization, should the user accept.
	Role NullableRoleEnum `json:"role,omitempty"`
	// The user that created the invitation.
	Inviter *string `json:"inviter,omitempty"`
	// The name of the user that created the invitation.
	InviterName *string `json:"inviter_name,omitempty"`
	// The current state of the invitation.
	State *string `json:"state,omitempty"`
	// Additional details about the state of the invitation.
	StateDetail *string `json:"state_detail,omitempty"`
	// The resulting membership, should the user accept.
	Membership NullableString `json:"membership,omitempty"`
	// The organization that the user will become a member of, should the user accept.
	Organization *string `json:"organization,omitempty"`
}

// NewPatchedInvitation instantiates a new PatchedInvitation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedInvitation() *PatchedInvitation {
	this := PatchedInvitation{}
	return &this
}

// NewPatchedInvitationWithDefaults instantiates a new PatchedInvitation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedInvitationWithDefaults() *PatchedInvitation {
	this := PatchedInvitation{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *PatchedInvitation) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedInvitation) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *PatchedInvitation) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *PatchedInvitation) SetUrl(v string) {
	o.Url = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PatchedInvitation) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedInvitation) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PatchedInvitation) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PatchedInvitation) SetId(v string) {
	o.Id = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *PatchedInvitation) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedInvitation) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *PatchedInvitation) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *PatchedInvitation) SetEmail(v string) {
	o.Email = &v
}

// GetRole returns the Role field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedInvitation) GetRole() RoleEnum {
	if o == nil || o.Role.Get() == nil {
		var ret RoleEnum
		return ret
	}
	return *o.Role.Get()
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedInvitation) GetRoleOk() (*RoleEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.Role.Get(), o.Role.IsSet()
}

// HasRole returns a boolean if a field has been set.
func (o *PatchedInvitation) HasRole() bool {
	if o != nil && o.Role.IsSet() {
		return true
	}

	return false
}

// SetRole gets a reference to the given NullableRoleEnum and assigns it to the Role field.
func (o *PatchedInvitation) SetRole(v RoleEnum) {
	o.Role.Set(&v)
}
// SetRoleNil sets the value for Role to be an explicit nil
func (o *PatchedInvitation) SetRoleNil() {
	o.Role.Set(nil)
}

// UnsetRole ensures that no value is present for Role, not even an explicit nil
func (o *PatchedInvitation) UnsetRole() {
	o.Role.Unset()
}

// GetInviter returns the Inviter field value if set, zero value otherwise.
func (o *PatchedInvitation) GetInviter() string {
	if o == nil || o.Inviter == nil {
		var ret string
		return ret
	}
	return *o.Inviter
}

// GetInviterOk returns a tuple with the Inviter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedInvitation) GetInviterOk() (*string, bool) {
	if o == nil || o.Inviter == nil {
		return nil, false
	}
	return o.Inviter, true
}

// HasInviter returns a boolean if a field has been set.
func (o *PatchedInvitation) HasInviter() bool {
	if o != nil && o.Inviter != nil {
		return true
	}

	return false
}

// SetInviter gets a reference to the given string and assigns it to the Inviter field.
func (o *PatchedInvitation) SetInviter(v string) {
	o.Inviter = &v
}

// GetInviterName returns the InviterName field value if set, zero value otherwise.
func (o *PatchedInvitation) GetInviterName() string {
	if o == nil || o.InviterName == nil {
		var ret string
		return ret
	}
	return *o.InviterName
}

// GetInviterNameOk returns a tuple with the InviterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedInvitation) GetInviterNameOk() (*string, bool) {
	if o == nil || o.InviterName == nil {
		return nil, false
	}
	return o.InviterName, true
}

// HasInviterName returns a boolean if a field has been set.
func (o *PatchedInvitation) HasInviterName() bool {
	if o != nil && o.InviterName != nil {
		return true
	}

	return false
}

// SetInviterName gets a reference to the given string and assigns it to the InviterName field.
func (o *PatchedInvitation) SetInviterName(v string) {
	o.InviterName = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *PatchedInvitation) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedInvitation) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *PatchedInvitation) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *PatchedInvitation) SetState(v string) {
	o.State = &v
}

// GetStateDetail returns the StateDetail field value if set, zero value otherwise.
func (o *PatchedInvitation) GetStateDetail() string {
	if o == nil || o.StateDetail == nil {
		var ret string
		return ret
	}
	return *o.StateDetail
}

// GetStateDetailOk returns a tuple with the StateDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedInvitation) GetStateDetailOk() (*string, bool) {
	if o == nil || o.StateDetail == nil {
		return nil, false
	}
	return o.StateDetail, true
}

// HasStateDetail returns a boolean if a field has been set.
func (o *PatchedInvitation) HasStateDetail() bool {
	if o != nil && o.StateDetail != nil {
		return true
	}

	return false
}

// SetStateDetail gets a reference to the given string and assigns it to the StateDetail field.
func (o *PatchedInvitation) SetStateDetail(v string) {
	o.StateDetail = &v
}

// GetMembership returns the Membership field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedInvitation) GetMembership() string {
	if o == nil || o.Membership.Get() == nil {
		var ret string
		return ret
	}
	return *o.Membership.Get()
}

// GetMembershipOk returns a tuple with the Membership field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedInvitation) GetMembershipOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Membership.Get(), o.Membership.IsSet()
}

// HasMembership returns a boolean if a field has been set.
func (o *PatchedInvitation) HasMembership() bool {
	if o != nil && o.Membership.IsSet() {
		return true
	}

	return false
}

// SetMembership gets a reference to the given NullableString and assigns it to the Membership field.
func (o *PatchedInvitation) SetMembership(v string) {
	o.Membership.Set(&v)
}
// SetMembershipNil sets the value for Membership to be an explicit nil
func (o *PatchedInvitation) SetMembershipNil() {
	o.Membership.Set(nil)
}

// UnsetMembership ensures that no value is present for Membership, not even an explicit nil
func (o *PatchedInvitation) UnsetMembership() {
	o.Membership.Unset()
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *PatchedInvitation) GetOrganization() string {
	if o == nil || o.Organization == nil {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedInvitation) GetOrganizationOk() (*string, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *PatchedInvitation) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *PatchedInvitation) SetOrganization(v string) {
	o.Organization = &v
}

func (o PatchedInvitation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Role.IsSet() {
		toSerialize["role"] = o.Role.Get()
	}
	if o.Inviter != nil {
		toSerialize["inviter"] = o.Inviter
	}
	if o.InviterName != nil {
		toSerialize["inviter_name"] = o.InviterName
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.StateDetail != nil {
		toSerialize["state_detail"] = o.StateDetail
	}
	if o.Membership.IsSet() {
		toSerialize["membership"] = o.Membership.Get()
	}
	if o.Organization != nil {
		toSerialize["organization"] = o.Organization
	}
	return json.Marshal(toSerialize)
}

type NullablePatchedInvitation struct {
	value *PatchedInvitation
	isSet bool
}

func (v NullablePatchedInvitation) Get() *PatchedInvitation {
	return v.value
}

func (v *NullablePatchedInvitation) Set(val *PatchedInvitation) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedInvitation) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedInvitation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedInvitation(val *PatchedInvitation) *NullablePatchedInvitation {
	return &NullablePatchedInvitation{value: val, isSet: true}
}

func (v NullablePatchedInvitation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedInvitation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


