/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
	"fmt"
)

// checks if the IntegrationNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationNode{}

// IntegrationNode Describes the content available at a given location.
type IntegrationNode struct {
	Fqn string `json:"fqn"`
	NodeType NodeTypeEnum `json:"node_type"`
	Secret *bool `json:"secret,omitempty"`
	Name *string `json:"name,omitempty"`
	Jmespath NullableString `json:"jmespath,omitempty"`
	ContentType NullableString `json:"content_type,omitempty"`
	ContentData NullableString `json:"content_data,omitempty"`
	ContentSize NullableInt32 `json:"content_size,omitempty"`
	ContentKeys []string `json:"content_keys,omitempty"`
	VenueId NullableString `json:"venue_id,omitempty"`
}

type _IntegrationNode IntegrationNode

// NewIntegrationNode instantiates a new IntegrationNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationNode(fqn string, nodeType NodeTypeEnum) *IntegrationNode {
	this := IntegrationNode{}
	this.Fqn = fqn
	this.NodeType = nodeType
	return &this
}

// NewIntegrationNodeWithDefaults instantiates a new IntegrationNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationNodeWithDefaults() *IntegrationNode {
	this := IntegrationNode{}
	return &this
}

// GetFqn returns the Fqn field value
func (o *IntegrationNode) GetFqn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fqn
}

// GetFqnOk returns a tuple with the Fqn field value
// and a boolean to check if the value has been set.
func (o *IntegrationNode) GetFqnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fqn, true
}

// SetFqn sets field value
func (o *IntegrationNode) SetFqn(v string) {
	o.Fqn = v
}

// GetNodeType returns the NodeType field value
func (o *IntegrationNode) GetNodeType() NodeTypeEnum {
	if o == nil {
		var ret NodeTypeEnum
		return ret
	}

	return o.NodeType
}

// GetNodeTypeOk returns a tuple with the NodeType field value
// and a boolean to check if the value has been set.
func (o *IntegrationNode) GetNodeTypeOk() (*NodeTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeType, true
}

// SetNodeType sets field value
func (o *IntegrationNode) SetNodeType(v NodeTypeEnum) {
	o.NodeType = v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *IntegrationNode) GetSecret() bool {
	if o == nil || IsNil(o.Secret) {
		var ret bool
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationNode) GetSecretOk() (*bool, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *IntegrationNode) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given bool and assigns it to the Secret field.
func (o *IntegrationNode) SetSecret(v bool) {
	o.Secret = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IntegrationNode) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationNode) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IntegrationNode) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IntegrationNode) SetName(v string) {
	o.Name = &v
}

// GetJmespath returns the Jmespath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegrationNode) GetJmespath() string {
	if o == nil || IsNil(o.Jmespath.Get()) {
		var ret string
		return ret
	}
	return *o.Jmespath.Get()
}

// GetJmespathOk returns a tuple with the Jmespath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegrationNode) GetJmespathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Jmespath.Get(), o.Jmespath.IsSet()
}

// HasJmespath returns a boolean if a field has been set.
func (o *IntegrationNode) HasJmespath() bool {
	if o != nil && o.Jmespath.IsSet() {
		return true
	}

	return false
}

// SetJmespath gets a reference to the given NullableString and assigns it to the Jmespath field.
func (o *IntegrationNode) SetJmespath(v string) {
	o.Jmespath.Set(&v)
}
// SetJmespathNil sets the value for Jmespath to be an explicit nil
func (o *IntegrationNode) SetJmespathNil() {
	o.Jmespath.Set(nil)
}

// UnsetJmespath ensures that no value is present for Jmespath, not even an explicit nil
func (o *IntegrationNode) UnsetJmespath() {
	o.Jmespath.Unset()
}

// GetContentType returns the ContentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegrationNode) GetContentType() string {
	if o == nil || IsNil(o.ContentType.Get()) {
		var ret string
		return ret
	}
	return *o.ContentType.Get()
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegrationNode) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContentType.Get(), o.ContentType.IsSet()
}

// HasContentType returns a boolean if a field has been set.
func (o *IntegrationNode) HasContentType() bool {
	if o != nil && o.ContentType.IsSet() {
		return true
	}

	return false
}

// SetContentType gets a reference to the given NullableString and assigns it to the ContentType field.
func (o *IntegrationNode) SetContentType(v string) {
	o.ContentType.Set(&v)
}
// SetContentTypeNil sets the value for ContentType to be an explicit nil
func (o *IntegrationNode) SetContentTypeNil() {
	o.ContentType.Set(nil)
}

// UnsetContentType ensures that no value is present for ContentType, not even an explicit nil
func (o *IntegrationNode) UnsetContentType() {
	o.ContentType.Unset()
}

// GetContentData returns the ContentData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegrationNode) GetContentData() string {
	if o == nil || IsNil(o.ContentData.Get()) {
		var ret string
		return ret
	}
	return *o.ContentData.Get()
}

// GetContentDataOk returns a tuple with the ContentData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegrationNode) GetContentDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContentData.Get(), o.ContentData.IsSet()
}

// HasContentData returns a boolean if a field has been set.
func (o *IntegrationNode) HasContentData() bool {
	if o != nil && o.ContentData.IsSet() {
		return true
	}

	return false
}

// SetContentData gets a reference to the given NullableString and assigns it to the ContentData field.
func (o *IntegrationNode) SetContentData(v string) {
	o.ContentData.Set(&v)
}
// SetContentDataNil sets the value for ContentData to be an explicit nil
func (o *IntegrationNode) SetContentDataNil() {
	o.ContentData.Set(nil)
}

// UnsetContentData ensures that no value is present for ContentData, not even an explicit nil
func (o *IntegrationNode) UnsetContentData() {
	o.ContentData.Unset()
}

// GetContentSize returns the ContentSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegrationNode) GetContentSize() int32 {
	if o == nil || IsNil(o.ContentSize.Get()) {
		var ret int32
		return ret
	}
	return *o.ContentSize.Get()
}

// GetContentSizeOk returns a tuple with the ContentSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegrationNode) GetContentSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContentSize.Get(), o.ContentSize.IsSet()
}

// HasContentSize returns a boolean if a field has been set.
func (o *IntegrationNode) HasContentSize() bool {
	if o != nil && o.ContentSize.IsSet() {
		return true
	}

	return false
}

// SetContentSize gets a reference to the given NullableInt32 and assigns it to the ContentSize field.
func (o *IntegrationNode) SetContentSize(v int32) {
	o.ContentSize.Set(&v)
}
// SetContentSizeNil sets the value for ContentSize to be an explicit nil
func (o *IntegrationNode) SetContentSizeNil() {
	o.ContentSize.Set(nil)
}

// UnsetContentSize ensures that no value is present for ContentSize, not even an explicit nil
func (o *IntegrationNode) UnsetContentSize() {
	o.ContentSize.Unset()
}

// GetContentKeys returns the ContentKeys field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegrationNode) GetContentKeys() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ContentKeys
}

// GetContentKeysOk returns a tuple with the ContentKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegrationNode) GetContentKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.ContentKeys) {
		return nil, false
	}
	return o.ContentKeys, true
}

// HasContentKeys returns a boolean if a field has been set.
func (o *IntegrationNode) HasContentKeys() bool {
	if o != nil && IsNil(o.ContentKeys) {
		return true
	}

	return false
}

// SetContentKeys gets a reference to the given []string and assigns it to the ContentKeys field.
func (o *IntegrationNode) SetContentKeys(v []string) {
	o.ContentKeys = v
}

// GetVenueId returns the VenueId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IntegrationNode) GetVenueId() string {
	if o == nil || IsNil(o.VenueId.Get()) {
		var ret string
		return ret
	}
	return *o.VenueId.Get()
}

// GetVenueIdOk returns a tuple with the VenueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegrationNode) GetVenueIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VenueId.Get(), o.VenueId.IsSet()
}

// HasVenueId returns a boolean if a field has been set.
func (o *IntegrationNode) HasVenueId() bool {
	if o != nil && o.VenueId.IsSet() {
		return true
	}

	return false
}

// SetVenueId gets a reference to the given NullableString and assigns it to the VenueId field.
func (o *IntegrationNode) SetVenueId(v string) {
	o.VenueId.Set(&v)
}
// SetVenueIdNil sets the value for VenueId to be an explicit nil
func (o *IntegrationNode) SetVenueIdNil() {
	o.VenueId.Set(nil)
}

// UnsetVenueId ensures that no value is present for VenueId, not even an explicit nil
func (o *IntegrationNode) UnsetVenueId() {
	o.VenueId.Unset()
}

func (o IntegrationNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fqn"] = o.Fqn
	toSerialize["node_type"] = o.NodeType
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Jmespath.IsSet() {
		toSerialize["jmespath"] = o.Jmespath.Get()
	}
	if o.ContentType.IsSet() {
		toSerialize["content_type"] = o.ContentType.Get()
	}
	if o.ContentData.IsSet() {
		toSerialize["content_data"] = o.ContentData.Get()
	}
	if o.ContentSize.IsSet() {
		toSerialize["content_size"] = o.ContentSize.Get()
	}
	if o.ContentKeys != nil {
		toSerialize["content_keys"] = o.ContentKeys
	}
	if o.VenueId.IsSet() {
		toSerialize["venue_id"] = o.VenueId.Get()
	}
	return toSerialize, nil
}

func (o *IntegrationNode) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fqn",
		"node_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIntegrationNode := _IntegrationNode{}

	err = json.Unmarshal(bytes, &varIntegrationNode)

	if err != nil {
		return err
	}

	*o = IntegrationNode(varIntegrationNode)

	return err
}

type NullableIntegrationNode struct {
	value *IntegrationNode
	isSet bool
}

func (v NullableIntegrationNode) Get() *IntegrationNode {
	return v.value
}

func (v *NullableIntegrationNode) Set(val *IntegrationNode) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationNode) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationNode(val *IntegrationNode) *NullableIntegrationNode {
	return &NullableIntegrationNode{value: val, isSet: true}
}

func (v NullableIntegrationNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


