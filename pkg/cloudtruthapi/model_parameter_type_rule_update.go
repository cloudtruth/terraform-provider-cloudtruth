/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ParameterTypeRuleUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParameterTypeRuleUpdate{}

// ParameterTypeRuleUpdate A type of `ModelSerializer` that uses hyperlinked relationships with compound keys instead of primary key relationships.  Specifically:  * A 'url' field is included instead of the 'id' field. * Relationships to other instances are hyperlinks, instead of primary keys.  NOTE: this only works with DRF 3.1.0 and above.
type ParameterTypeRuleUpdate struct {
	Id string `json:"id"`
	// The type this rule is for.
	ParameterType string `json:"parameter_type"`
	Type ParameterRuleTypeEnum `json:"type"`
	Constraint string `json:"constraint"`
	CreatedAt time.Time `json:"created_at"`
	ModifiedAt NullableTime `json:"modified_at"`
}

type _ParameterTypeRuleUpdate ParameterTypeRuleUpdate

// NewParameterTypeRuleUpdate instantiates a new ParameterTypeRuleUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameterTypeRuleUpdate(id string, parameterType string, type_ ParameterRuleTypeEnum, constraint string, createdAt time.Time, modifiedAt NullableTime) *ParameterTypeRuleUpdate {
	this := ParameterTypeRuleUpdate{}
	this.Id = id
	this.ParameterType = parameterType
	this.Type = type_
	this.Constraint = constraint
	this.CreatedAt = createdAt
	this.ModifiedAt = modifiedAt
	return &this
}

// NewParameterTypeRuleUpdateWithDefaults instantiates a new ParameterTypeRuleUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParameterTypeRuleUpdateWithDefaults() *ParameterTypeRuleUpdate {
	this := ParameterTypeRuleUpdate{}
	return &this
}

// GetId returns the Id field value
func (o *ParameterTypeRuleUpdate) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ParameterTypeRuleUpdate) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ParameterTypeRuleUpdate) SetId(v string) {
	o.Id = v
}

// GetParameterType returns the ParameterType field value
func (o *ParameterTypeRuleUpdate) GetParameterType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParameterType
}

// GetParameterTypeOk returns a tuple with the ParameterType field value
// and a boolean to check if the value has been set.
func (o *ParameterTypeRuleUpdate) GetParameterTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParameterType, true
}

// SetParameterType sets field value
func (o *ParameterTypeRuleUpdate) SetParameterType(v string) {
	o.ParameterType = v
}

// GetType returns the Type field value
func (o *ParameterTypeRuleUpdate) GetType() ParameterRuleTypeEnum {
	if o == nil {
		var ret ParameterRuleTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ParameterTypeRuleUpdate) GetTypeOk() (*ParameterRuleTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ParameterTypeRuleUpdate) SetType(v ParameterRuleTypeEnum) {
	o.Type = v
}

// GetConstraint returns the Constraint field value
func (o *ParameterTypeRuleUpdate) GetConstraint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Constraint
}

// GetConstraintOk returns a tuple with the Constraint field value
// and a boolean to check if the value has been set.
func (o *ParameterTypeRuleUpdate) GetConstraintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Constraint, true
}

// SetConstraint sets field value
func (o *ParameterTypeRuleUpdate) SetConstraint(v string) {
	o.Constraint = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ParameterTypeRuleUpdate) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ParameterTypeRuleUpdate) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ParameterTypeRuleUpdate) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetModifiedAt returns the ModifiedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *ParameterTypeRuleUpdate) GetModifiedAt() time.Time {
	if o == nil || o.ModifiedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.ModifiedAt.Get()
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParameterTypeRuleUpdate) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedAt.Get(), o.ModifiedAt.IsSet()
}

// SetModifiedAt sets field value
func (o *ParameterTypeRuleUpdate) SetModifiedAt(v time.Time) {
	o.ModifiedAt.Set(&v)
}

func (o ParameterTypeRuleUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParameterTypeRuleUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["parameter_type"] = o.ParameterType
	toSerialize["type"] = o.Type
	toSerialize["constraint"] = o.Constraint
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["modified_at"] = o.ModifiedAt.Get()
	return toSerialize, nil
}

func (o *ParameterTypeRuleUpdate) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"parameter_type",
		"type",
		"constraint",
		"created_at",
		"modified_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParameterTypeRuleUpdate := _ParameterTypeRuleUpdate{}

	err = json.Unmarshal(bytes, &varParameterTypeRuleUpdate)

	if err != nil {
		return err
	}

	*o = ParameterTypeRuleUpdate(varParameterTypeRuleUpdate)

	return err
}

type NullableParameterTypeRuleUpdate struct {
	value *ParameterTypeRuleUpdate
	isSet bool
}

func (v NullableParameterTypeRuleUpdate) Get() *ParameterTypeRuleUpdate {
	return v.value
}

func (v *NullableParameterTypeRuleUpdate) Set(val *ParameterTypeRuleUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterTypeRuleUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterTypeRuleUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterTypeRuleUpdate(val *ParameterTypeRuleUpdate) *NullableParameterTypeRuleUpdate {
	return &NullableParameterTypeRuleUpdate{value: val, isSet: true}
}

func (v NullableParameterTypeRuleUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterTypeRuleUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


