/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
	"time"
)

// checks if the GitHubPull type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitHubPull{}

// GitHubPull Pull actions can be configured to get configuration and secrets from integrations on demand.
type GitHubPull struct {
	Url string `json:"url"`
	// Unique identifier for the action.
	Id string `json:"id"`
	// The action name.
	Name string `json:"name"`
	// The optional description for the action.
	Description *string `json:"description,omitempty"`
	LatestTask NullableGitHubPullLatestTask `json:"latest_task"`
	CreatedAt time.Time `json:"created_at"`
	ModifiedAt time.Time `json:"modified_at"`
	// Allow the pull to create environments.  Any automatically created environments will be children of the `default` environment.  If an environment needs to be created but the action does not allow it, a task step will be added with a null operation, and success_detail will indicate the action did not allow it.
	CreateEnvironments *bool `json:"create_environments,omitempty"`
	// Allow the pull to create projects.  If a project needs to be created but the action does not allow it, a task step will be added with a null operation, and success_detail will indicate the action did not allow it.
	CreateProjects *bool `json:"create_projects,omitempty"`
	// When set to dry-run mode an action will report the changes that it would have made in task steps, however those changes are not actually performed.
	DryRun *bool `json:"dry_run,omitempty"`
	// Values being managed by a mapped pull.
	MappedValues []Value `json:"mapped_values"`
	Mode ModeEnum `json:"mode"`
}

// NewGitHubPull instantiates a new GitHubPull object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitHubPull(url string, id string, name string, latestTask NullableGitHubPullLatestTask, createdAt time.Time, modifiedAt time.Time, mappedValues []Value, mode ModeEnum) *GitHubPull {
	this := GitHubPull{}
	this.Url = url
	this.Id = id
	this.Name = name
	this.LatestTask = latestTask
	this.CreatedAt = createdAt
	this.ModifiedAt = modifiedAt
	this.MappedValues = mappedValues
	this.Mode = mode
	return &this
}

// NewGitHubPullWithDefaults instantiates a new GitHubPull object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitHubPullWithDefaults() *GitHubPull {
	this := GitHubPull{}
	return &this
}

// GetUrl returns the Url field value
func (o *GitHubPull) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *GitHubPull) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *GitHubPull) SetUrl(v string) {
	o.Url = v
}

// GetId returns the Id field value
func (o *GitHubPull) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GitHubPull) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GitHubPull) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *GitHubPull) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GitHubPull) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GitHubPull) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GitHubPull) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitHubPull) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GitHubPull) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GitHubPull) SetDescription(v string) {
	o.Description = &v
}

// GetLatestTask returns the LatestTask field value
// If the value is explicit nil, the zero value for GitHubPullLatestTask will be returned
func (o *GitHubPull) GetLatestTask() GitHubPullLatestTask {
	if o == nil || o.LatestTask.Get() == nil {
		var ret GitHubPullLatestTask
		return ret
	}

	return *o.LatestTask.Get()
}

// GetLatestTaskOk returns a tuple with the LatestTask field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GitHubPull) GetLatestTaskOk() (*GitHubPullLatestTask, bool) {
	if o == nil {
		return nil, false
	}
	return o.LatestTask.Get(), o.LatestTask.IsSet()
}

// SetLatestTask sets field value
func (o *GitHubPull) SetLatestTask(v GitHubPullLatestTask) {
	o.LatestTask.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *GitHubPull) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *GitHubPull) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *GitHubPull) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetModifiedAt returns the ModifiedAt field value
func (o *GitHubPull) GetModifiedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
func (o *GitHubPull) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedAt, true
}

// SetModifiedAt sets field value
func (o *GitHubPull) SetModifiedAt(v time.Time) {
	o.ModifiedAt = v
}

// GetCreateEnvironments returns the CreateEnvironments field value if set, zero value otherwise.
func (o *GitHubPull) GetCreateEnvironments() bool {
	if o == nil || IsNil(o.CreateEnvironments) {
		var ret bool
		return ret
	}
	return *o.CreateEnvironments
}

// GetCreateEnvironmentsOk returns a tuple with the CreateEnvironments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitHubPull) GetCreateEnvironmentsOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateEnvironments) {
		return nil, false
	}
	return o.CreateEnvironments, true
}

// HasCreateEnvironments returns a boolean if a field has been set.
func (o *GitHubPull) HasCreateEnvironments() bool {
	if o != nil && !IsNil(o.CreateEnvironments) {
		return true
	}

	return false
}

// SetCreateEnvironments gets a reference to the given bool and assigns it to the CreateEnvironments field.
func (o *GitHubPull) SetCreateEnvironments(v bool) {
	o.CreateEnvironments = &v
}

// GetCreateProjects returns the CreateProjects field value if set, zero value otherwise.
func (o *GitHubPull) GetCreateProjects() bool {
	if o == nil || IsNil(o.CreateProjects) {
		var ret bool
		return ret
	}
	return *o.CreateProjects
}

// GetCreateProjectsOk returns a tuple with the CreateProjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitHubPull) GetCreateProjectsOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateProjects) {
		return nil, false
	}
	return o.CreateProjects, true
}

// HasCreateProjects returns a boolean if a field has been set.
func (o *GitHubPull) HasCreateProjects() bool {
	if o != nil && !IsNil(o.CreateProjects) {
		return true
	}

	return false
}

// SetCreateProjects gets a reference to the given bool and assigns it to the CreateProjects field.
func (o *GitHubPull) SetCreateProjects(v bool) {
	o.CreateProjects = &v
}

// GetDryRun returns the DryRun field value if set, zero value otherwise.
func (o *GitHubPull) GetDryRun() bool {
	if o == nil || IsNil(o.DryRun) {
		var ret bool
		return ret
	}
	return *o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitHubPull) GetDryRunOk() (*bool, bool) {
	if o == nil || IsNil(o.DryRun) {
		return nil, false
	}
	return o.DryRun, true
}

// HasDryRun returns a boolean if a field has been set.
func (o *GitHubPull) HasDryRun() bool {
	if o != nil && !IsNil(o.DryRun) {
		return true
	}

	return false
}

// SetDryRun gets a reference to the given bool and assigns it to the DryRun field.
func (o *GitHubPull) SetDryRun(v bool) {
	o.DryRun = &v
}

// GetMappedValues returns the MappedValues field value
func (o *GitHubPull) GetMappedValues() []Value {
	if o == nil {
		var ret []Value
		return ret
	}

	return o.MappedValues
}

// GetMappedValuesOk returns a tuple with the MappedValues field value
// and a boolean to check if the value has been set.
func (o *GitHubPull) GetMappedValuesOk() ([]Value, bool) {
	if o == nil {
		return nil, false
	}
	return o.MappedValues, true
}

// SetMappedValues sets field value
func (o *GitHubPull) SetMappedValues(v []Value) {
	o.MappedValues = v
}

// GetMode returns the Mode field value
func (o *GitHubPull) GetMode() ModeEnum {
	if o == nil {
		var ret ModeEnum
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *GitHubPull) GetModeOk() (*ModeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *GitHubPull) SetMode(v ModeEnum) {
	o.Mode = v
}

func (o GitHubPull) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitHubPull) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["latest_task"] = o.LatestTask.Get()
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["modified_at"] = o.ModifiedAt
	if !IsNil(o.CreateEnvironments) {
		toSerialize["create_environments"] = o.CreateEnvironments
	}
	if !IsNil(o.CreateProjects) {
		toSerialize["create_projects"] = o.CreateProjects
	}
	if !IsNil(o.DryRun) {
		toSerialize["dry_run"] = o.DryRun
	}
	toSerialize["mapped_values"] = o.MappedValues
	toSerialize["mode"] = o.Mode
	return toSerialize, nil
}

type NullableGitHubPull struct {
	value *GitHubPull
	isSet bool
}

func (v NullableGitHubPull) Get() *GitHubPull {
	return v.value
}

func (v *NullableGitHubPull) Set(val *GitHubPull) {
	v.value = val
	v.isSet = true
}

func (v NullableGitHubPull) IsSet() bool {
	return v.isSet
}

func (v *NullableGitHubPull) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitHubPull(val *GitHubPull) *NullableGitHubPull {
	return &NullableGitHubPull{value: val, isSet: true}
}

func (v NullableGitHubPull) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitHubPull) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


