/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
	"fmt"
)

// checks if the TemplateLookupError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateLookupError{}

// TemplateLookupError Indicates errors occurred while retrieving values to substitute into the template.
type TemplateLookupError struct {
	Detail []TemplateLookupErrorEntry `json:"detail"`
}

type _TemplateLookupError TemplateLookupError

// NewTemplateLookupError instantiates a new TemplateLookupError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateLookupError(detail []TemplateLookupErrorEntry) *TemplateLookupError {
	this := TemplateLookupError{}
	this.Detail = detail
	return &this
}

// NewTemplateLookupErrorWithDefaults instantiates a new TemplateLookupError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateLookupErrorWithDefaults() *TemplateLookupError {
	this := TemplateLookupError{}
	return &this
}

// GetDetail returns the Detail field value
func (o *TemplateLookupError) GetDetail() []TemplateLookupErrorEntry {
	if o == nil {
		var ret []TemplateLookupErrorEntry
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *TemplateLookupError) GetDetailOk() ([]TemplateLookupErrorEntry, bool) {
	if o == nil {
		return nil, false
	}
	return o.Detail, true
}

// SetDetail sets field value
func (o *TemplateLookupError) SetDetail(v []TemplateLookupErrorEntry) {
	o.Detail = v
}

func (o TemplateLookupError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateLookupError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["detail"] = o.Detail
	return toSerialize, nil
}

func (o *TemplateLookupError) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"detail",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTemplateLookupError := _TemplateLookupError{}

	err = json.Unmarshal(bytes, &varTemplateLookupError)

	if err != nil {
		return err
	}

	*o = TemplateLookupError(varTemplateLookupError)

	return err
}

type NullableTemplateLookupError struct {
	value *TemplateLookupError
	isSet bool
}

func (v NullableTemplateLookupError) Get() *TemplateLookupError {
	return v.value
}

func (v *NullableTemplateLookupError) Set(val *TemplateLookupError) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateLookupError) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateLookupError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateLookupError(val *TemplateLookupError) *NullableTemplateLookupError {
	return &NullableTemplateLookupError{value: val, isSet: true}
}

func (v NullableTemplateLookupError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateLookupError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


