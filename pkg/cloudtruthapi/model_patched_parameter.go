/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
	"time"
)

// PatchedParameter A single parameter inside of a project.
type PatchedParameter struct {
	Url *string `json:"url,omitempty"`
	// A unique identifier for the parameter.
	Id *string `json:"id,omitempty"`
	// The parameter name.
	Name *string `json:"name,omitempty"`
	// A description of the parameter.  You may find it helpful to document how this parameter is used to assist others when they need to maintain software that uses this content.
	Description *string `json:"description,omitempty"`
	// Indicates if this content is secret or not.  When a parameter is considered to be a secret, any internal values are stored in a dedicated vault for your organization for maximum security.  External values are inspected on-demand to ensure they align with the parameter's secret setting and if they do not, those external values are not allowed to be used.
	Secret *bool `json:"secret,omitempty"`
	// The type of this Parameter.
	Type *string `json:"type,omitempty"`
	// Rules applied to this parameter.
	Rules []ParameterRule `json:"rules,omitempty"`
	// The project that the parameter is within.
	Project *string `json:"project,omitempty"`
	// The project name that the parameter is within.
	ProjectName *string `json:"project_name,omitempty"`
	// Templates that reference this Parameter.
	ReferencingTemplates []string `json:"referencing_templates,omitempty"`
	// Dynamic values that reference this Parameter.
	ReferencingValues []string `json:"referencing_values,omitempty"`
	//              This dictionary has keys that correspond to environment urls, and values             that correspond to the effective value for this parameter in that environment.             Each parameter has an effective value in every environment based on             project dependencies and environment inheritance.              The effective value is found by looking (within the keyed environment) up             the project dependencies by parameter name.  If a value is not found, the             parent environment is consulted with the same logic to locate a value.  It             is possible for there to be a `null` value record for an environment, which             means there is no value set; it is also possible for there to be a value record             with a `value` of `null`, which means the value was explicitly set to `null`.              If the value's parameter does not match the enclosing parameter (holding the             values array) then that value is flowing in through project dependencies.             Clients must recognize this in case the user asks to modify the value; in this             case the client must POST a new Value to the current parameter to override the             value coming in from the project dependency.              If the Value.environment matches the key, then it is an explicit value set for             that environment.  If they differ, the value was obtained from a parent             environment (directly or indirectly).  If the value is None then no value has             ever been set in any environment for this parameter within all the project             dependencies.
	Values *map[string]ParameterValuesValue `json:"values,omitempty"`
	// If this parameter's project depends on another project which provides a parameter of the same name, this parameter overrides the one provided by the dependee.  You can use this field to determine if there will be side-effects the user should know about when deleting a parameter.  Deleting a parameter that overrides another one due to an identical name will uncover the one from the dependee project.
	Overrides  NullableString `json:"overrides,omitempty"`
	CreatedAt  *time.Time     `json:"created_at,omitempty"`
	ModifiedAt *time.Time     `json:"modified_at,omitempty"`
}

// NewPatchedParameter instantiates a new PatchedParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedParameter() *PatchedParameter {
	this := PatchedParameter{}
	var type_ string = "string"
	this.Type = &type_
	return &this
}

// NewPatchedParameterWithDefaults instantiates a new PatchedParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedParameterWithDefaults() *PatchedParameter {
	this := PatchedParameter{}
	var type_ string = "string"
	this.Type = &type_
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *PatchedParameter) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedParameter) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *PatchedParameter) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *PatchedParameter) SetUrl(v string) {
	o.Url = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PatchedParameter) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedParameter) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PatchedParameter) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PatchedParameter) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedParameter) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedParameter) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedParameter) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedParameter) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PatchedParameter) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedParameter) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PatchedParameter) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PatchedParameter) SetDescription(v string) {
	o.Description = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *PatchedParameter) GetSecret() bool {
	if o == nil || o.Secret == nil {
		var ret bool
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedParameter) GetSecretOk() (*bool, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *PatchedParameter) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given bool and assigns it to the Secret field.
func (o *PatchedParameter) SetSecret(v bool) {
	o.Secret = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PatchedParameter) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedParameter) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PatchedParameter) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PatchedParameter) SetType(v string) {
	o.Type = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *PatchedParameter) GetRules() []ParameterRule {
	if o == nil || o.Rules == nil {
		var ret []ParameterRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedParameter) GetRulesOk() ([]ParameterRule, bool) {
	if o == nil || o.Rules == nil {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *PatchedParameter) HasRules() bool {
	if o != nil && o.Rules != nil {
		return true
	}

	return false
}

// SetRules gets a reference to the given []ParameterRule and assigns it to the Rules field.
func (o *PatchedParameter) SetRules(v []ParameterRule) {
	o.Rules = v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *PatchedParameter) GetProject() string {
	if o == nil || o.Project == nil {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedParameter) GetProjectOk() (*string, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *PatchedParameter) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *PatchedParameter) SetProject(v string) {
	o.Project = &v
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise.
func (o *PatchedParameter) GetProjectName() string {
	if o == nil || o.ProjectName == nil {
		var ret string
		return ret
	}
	return *o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedParameter) GetProjectNameOk() (*string, bool) {
	if o == nil || o.ProjectName == nil {
		return nil, false
	}
	return o.ProjectName, true
}

// HasProjectName returns a boolean if a field has been set.
func (o *PatchedParameter) HasProjectName() bool {
	if o != nil && o.ProjectName != nil {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given string and assigns it to the ProjectName field.
func (o *PatchedParameter) SetProjectName(v string) {
	o.ProjectName = &v
}

// GetReferencingTemplates returns the ReferencingTemplates field value if set, zero value otherwise.
func (o *PatchedParameter) GetReferencingTemplates() []string {
	if o == nil || o.ReferencingTemplates == nil {
		var ret []string
		return ret
	}
	return o.ReferencingTemplates
}

// GetReferencingTemplatesOk returns a tuple with the ReferencingTemplates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedParameter) GetReferencingTemplatesOk() ([]string, bool) {
	if o == nil || o.ReferencingTemplates == nil {
		return nil, false
	}
	return o.ReferencingTemplates, true
}

// HasReferencingTemplates returns a boolean if a field has been set.
func (o *PatchedParameter) HasReferencingTemplates() bool {
	if o != nil && o.ReferencingTemplates != nil {
		return true
	}

	return false
}

// SetReferencingTemplates gets a reference to the given []string and assigns it to the ReferencingTemplates field.
func (o *PatchedParameter) SetReferencingTemplates(v []string) {
	o.ReferencingTemplates = v
}

// GetReferencingValues returns the ReferencingValues field value if set, zero value otherwise.
func (o *PatchedParameter) GetReferencingValues() []string {
	if o == nil || o.ReferencingValues == nil {
		var ret []string
		return ret
	}
	return o.ReferencingValues
}

// GetReferencingValuesOk returns a tuple with the ReferencingValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedParameter) GetReferencingValuesOk() ([]string, bool) {
	if o == nil || o.ReferencingValues == nil {
		return nil, false
	}
	return o.ReferencingValues, true
}

// HasReferencingValues returns a boolean if a field has been set.
func (o *PatchedParameter) HasReferencingValues() bool {
	if o != nil && o.ReferencingValues != nil {
		return true
	}

	return false
}

// SetReferencingValues gets a reference to the given []string and assigns it to the ReferencingValues field.
func (o *PatchedParameter) SetReferencingValues(v []string) {
	o.ReferencingValues = v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *PatchedParameter) GetValues() map[string]ParameterValuesValue {
	if o == nil || o.Values == nil {
		var ret map[string]ParameterValuesValue
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedParameter) GetValuesOk() (*map[string]ParameterValuesValue, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *PatchedParameter) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given map[string]ParameterValuesValue and assigns it to the Values field.
func (o *PatchedParameter) SetValues(v map[string]ParameterValuesValue) {
	o.Values = &v
}

// GetOverrides returns the Overrides field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedParameter) GetOverrides() string {
	if o == nil || o.Overrides.Get() == nil {
		var ret string
		return ret
	}
	return *o.Overrides.Get()
}

// GetOverridesOk returns a tuple with the Overrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedParameter) GetOverridesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Overrides.Get(), o.Overrides.IsSet()
}

// HasOverrides returns a boolean if a field has been set.
func (o *PatchedParameter) HasOverrides() bool {
	if o != nil && o.Overrides.IsSet() {
		return true
	}

	return false
}

// SetOverrides gets a reference to the given NullableString and assigns it to the Overrides field.
func (o *PatchedParameter) SetOverrides(v string) {
	o.Overrides.Set(&v)
}

// SetOverridesNil sets the value for Overrides to be an explicit nil
func (o *PatchedParameter) SetOverridesNil() {
	o.Overrides.Set(nil)
}

// UnsetOverrides ensures that no value is present for Overrides, not even an explicit nil
func (o *PatchedParameter) UnsetOverrides() {
	o.Overrides.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PatchedParameter) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedParameter) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PatchedParameter) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PatchedParameter) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *PatchedParameter) GetModifiedAt() time.Time {
	if o == nil || o.ModifiedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedParameter) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || o.ModifiedAt == nil {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *PatchedParameter) HasModifiedAt() bool {
	if o != nil && o.ModifiedAt != nil {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *PatchedParameter) SetModifiedAt(v time.Time) {
	o.ModifiedAt = &v
}

func (o PatchedParameter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.ProjectName != nil {
		toSerialize["project_name"] = o.ProjectName
	}
	if o.ReferencingTemplates != nil {
		toSerialize["referencing_templates"] = o.ReferencingTemplates
	}
	if o.ReferencingValues != nil {
		toSerialize["referencing_values"] = o.ReferencingValues
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	if o.Overrides.IsSet() {
		toSerialize["overrides"] = o.Overrides.Get()
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.ModifiedAt != nil {
		toSerialize["modified_at"] = o.ModifiedAt
	}
	return json.Marshal(toSerialize)
}

type NullablePatchedParameter struct {
	value *PatchedParameter
	isSet bool
}

func (v NullablePatchedParameter) Get() *PatchedParameter {
	return v.value
}

func (v *NullablePatchedParameter) Set(val *PatchedParameter) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedParameter) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedParameter(val *PatchedParameter) *NullablePatchedParameter {
	return &NullablePatchedParameter{value: val, isSet: true}
}

func (v NullablePatchedParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
