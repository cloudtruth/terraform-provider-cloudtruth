/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
	"fmt"
)

// HistoryTypeEnum the model 'HistoryTypeEnum'
type HistoryTypeEnum string

// List of HistoryTypeEnum
const (
	HISTORYTYPEENUM_CREATE HistoryTypeEnum = "create"
	HISTORYTYPEENUM_UPDATE HistoryTypeEnum = "update"
	HISTORYTYPEENUM_DELETE HistoryTypeEnum = "delete"
	HISTORYTYPEENUM_NOTHING HistoryTypeEnum = "nothing"
)

// All allowed values of HistoryTypeEnum enum
var AllowedHistoryTypeEnumEnumValues = []HistoryTypeEnum{
	"create",
	"update",
	"delete",
	"nothing",
}

func (v *HistoryTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HistoryTypeEnum(value)
	for _, existing := range AllowedHistoryTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HistoryTypeEnum", value)
}

// NewHistoryTypeEnumFromValue returns a pointer to a valid HistoryTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHistoryTypeEnumFromValue(v string) (*HistoryTypeEnum, error) {
	ev := HistoryTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HistoryTypeEnum: valid values are %v", v, AllowedHistoryTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HistoryTypeEnum) IsValid() bool {
	for _, existing := range AllowedHistoryTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HistoryTypeEnum value
func (v HistoryTypeEnum) Ptr() *HistoryTypeEnum {
	return &v
}

type NullableHistoryTypeEnum struct {
	value *HistoryTypeEnum
	isSet bool
}

func (v NullableHistoryTypeEnum) Get() *HistoryTypeEnum {
	return v.value
}

func (v *NullableHistoryTypeEnum) Set(val *HistoryTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryTypeEnum(val *HistoryTypeEnum) *NullableHistoryTypeEnum {
	return &NullableHistoryTypeEnum{value: val, isSet: true}
}

func (v NullableHistoryTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

