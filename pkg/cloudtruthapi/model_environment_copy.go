/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
	"fmt"
)

// checks if the EnvironmentCopy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentCopy{}

// EnvironmentCopy struct for EnvironmentCopy
type EnvironmentCopy struct {
	// The environment name.
	Name string `json:"name"`
	// A description of the environment.  You may find it helpful to document how this environment is used to assist others when they need to maintain software that uses this content.
	Description *string `json:"description,omitempty"`
	// When copying child Environments, this indicates what name to use for each Environment.  If no name is provided for a given child Environment, a \"-1\" will be appended to its name.  Note that this name mapping can be used for Environments of any level of depth in the parent-child hierarchy.
	ChildEnvironmentNames map[string]string `json:"child_environment_names,omitempty"`
	// If true, copy child environments recursively.  If false, only copy the specified project.
	Recursive *bool `json:"recursive,omitempty"`
}

type _EnvironmentCopy EnvironmentCopy

// NewEnvironmentCopy instantiates a new EnvironmentCopy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentCopy(name string) *EnvironmentCopy {
	this := EnvironmentCopy{}
	this.Name = name
	return &this
}

// NewEnvironmentCopyWithDefaults instantiates a new EnvironmentCopy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentCopyWithDefaults() *EnvironmentCopy {
	this := EnvironmentCopy{}
	return &this
}

// GetName returns the Name field value
func (o *EnvironmentCopy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EnvironmentCopy) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EnvironmentCopy) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EnvironmentCopy) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentCopy) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EnvironmentCopy) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EnvironmentCopy) SetDescription(v string) {
	o.Description = &v
}

// GetChildEnvironmentNames returns the ChildEnvironmentNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EnvironmentCopy) GetChildEnvironmentNames() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.ChildEnvironmentNames
}

// GetChildEnvironmentNamesOk returns a tuple with the ChildEnvironmentNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EnvironmentCopy) GetChildEnvironmentNamesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ChildEnvironmentNames) {
		return nil, false
	}
	return &o.ChildEnvironmentNames, true
}

// HasChildEnvironmentNames returns a boolean if a field has been set.
func (o *EnvironmentCopy) HasChildEnvironmentNames() bool {
	if o != nil && IsNil(o.ChildEnvironmentNames) {
		return true
	}

	return false
}

// SetChildEnvironmentNames gets a reference to the given map[string]string and assigns it to the ChildEnvironmentNames field.
func (o *EnvironmentCopy) SetChildEnvironmentNames(v map[string]string) {
	o.ChildEnvironmentNames = v
}

// GetRecursive returns the Recursive field value if set, zero value otherwise.
func (o *EnvironmentCopy) GetRecursive() bool {
	if o == nil || IsNil(o.Recursive) {
		var ret bool
		return ret
	}
	return *o.Recursive
}

// GetRecursiveOk returns a tuple with the Recursive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentCopy) GetRecursiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Recursive) {
		return nil, false
	}
	return o.Recursive, true
}

// HasRecursive returns a boolean if a field has been set.
func (o *EnvironmentCopy) HasRecursive() bool {
	if o != nil && !IsNil(o.Recursive) {
		return true
	}

	return false
}

// SetRecursive gets a reference to the given bool and assigns it to the Recursive field.
func (o *EnvironmentCopy) SetRecursive(v bool) {
	o.Recursive = &v
}

func (o EnvironmentCopy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentCopy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.ChildEnvironmentNames != nil {
		toSerialize["child_environment_names"] = o.ChildEnvironmentNames
	}
	if !IsNil(o.Recursive) {
		toSerialize["recursive"] = o.Recursive
	}
	return toSerialize, nil
}

func (o *EnvironmentCopy) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentCopy := _EnvironmentCopy{}

	err = json.Unmarshal(bytes, &varEnvironmentCopy)

	if err != nil {
		return err
	}

	*o = EnvironmentCopy(varEnvironmentCopy)

	return err
}

type NullableEnvironmentCopy struct {
	value *EnvironmentCopy
	isSet bool
}

func (v NullableEnvironmentCopy) Get() *EnvironmentCopy {
	return v.value
}

func (v *NullableEnvironmentCopy) Set(val *EnvironmentCopy) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentCopy) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentCopy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentCopy(val *EnvironmentCopy) *NullableEnvironmentCopy {
	return &NullableEnvironmentCopy{value: val, isSet: true}
}

func (v NullableEnvironmentCopy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentCopy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


