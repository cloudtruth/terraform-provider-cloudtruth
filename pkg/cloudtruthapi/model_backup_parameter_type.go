/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
)

// BackupParameterType Parameter type (and rule) data at a point in time.
type BackupParameterType struct {
	Rules map[string]BackupParameterRule `json:"rules"`
	Name string `json:"name"`
	Parent string `json:"parent"`
	Description NullableString `json:"description,omitempty"`
}

// NewBackupParameterType instantiates a new BackupParameterType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupParameterType(rules map[string]BackupParameterRule, name string, parent string) *BackupParameterType {
	this := BackupParameterType{}
	this.Rules = rules
	this.Name = name
	this.Parent = parent
	return &this
}

// NewBackupParameterTypeWithDefaults instantiates a new BackupParameterType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupParameterTypeWithDefaults() *BackupParameterType {
	this := BackupParameterType{}
	return &this
}

// GetRules returns the Rules field value
func (o *BackupParameterType) GetRules() map[string]BackupParameterRule {
	if o == nil {
		var ret map[string]BackupParameterRule
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *BackupParameterType) GetRulesOk() (*map[string]BackupParameterRule, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rules, true
}

// SetRules sets field value
func (o *BackupParameterType) SetRules(v map[string]BackupParameterRule) {
	o.Rules = v
}

// GetName returns the Name field value
func (o *BackupParameterType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BackupParameterType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BackupParameterType) SetName(v string) {
	o.Name = v
}

// GetParent returns the Parent field value
func (o *BackupParameterType) GetParent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Parent
}

// GetParentOk returns a tuple with the Parent field value
// and a boolean to check if the value has been set.
func (o *BackupParameterType) GetParentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Parent, true
}

// SetParent sets field value
func (o *BackupParameterType) SetParent(v string) {
	o.Parent = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupParameterType) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupParameterType) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *BackupParameterType) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *BackupParameterType) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *BackupParameterType) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *BackupParameterType) UnsetDescription() {
	o.Description.Unset()
}

func (o BackupParameterType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["rules"] = o.Rules
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["parent"] = o.Parent
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableBackupParameterType struct {
	value *BackupParameterType
	isSet bool
}

func (v NullableBackupParameterType) Get() *BackupParameterType {
	return v.value
}

func (v *NullableBackupParameterType) Set(val *BackupParameterType) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupParameterType) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupParameterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupParameterType(val *BackupParameterType) *NullableBackupParameterType {
	return &NullableBackupParameterType{value: val, isSet: true}
}

func (v NullableBackupParameterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupParameterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


