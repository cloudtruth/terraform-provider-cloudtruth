/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
)

// checks if the ParameterTypeRuleCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParameterTypeRuleCreate{}

// ParameterTypeRuleCreate A type of `ModelSerializer` that uses hyperlinked relationships with compound keys instead of primary key relationships.  Specifically:  * A 'url' field is included instead of the 'id' field. * Relationships to other instances are hyperlinks, instead of primary keys.  NOTE: this only works with DRF 3.1.0 and above.
type ParameterTypeRuleCreate struct {
	Type ParameterRuleTypeEnum `json:"type"`
	Constraint string `json:"constraint"`
}

// NewParameterTypeRuleCreate instantiates a new ParameterTypeRuleCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameterTypeRuleCreate(type_ ParameterRuleTypeEnum, constraint string) *ParameterTypeRuleCreate {
	this := ParameterTypeRuleCreate{}
	this.Type = type_
	this.Constraint = constraint
	return &this
}

// NewParameterTypeRuleCreateWithDefaults instantiates a new ParameterTypeRuleCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParameterTypeRuleCreateWithDefaults() *ParameterTypeRuleCreate {
	this := ParameterTypeRuleCreate{}
	return &this
}

// GetType returns the Type field value
func (o *ParameterTypeRuleCreate) GetType() ParameterRuleTypeEnum {
	if o == nil {
		var ret ParameterRuleTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ParameterTypeRuleCreate) GetTypeOk() (*ParameterRuleTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ParameterTypeRuleCreate) SetType(v ParameterRuleTypeEnum) {
	o.Type = v
}

// GetConstraint returns the Constraint field value
func (o *ParameterTypeRuleCreate) GetConstraint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Constraint
}

// GetConstraintOk returns a tuple with the Constraint field value
// and a boolean to check if the value has been set.
func (o *ParameterTypeRuleCreate) GetConstraintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Constraint, true
}

// SetConstraint sets field value
func (o *ParameterTypeRuleCreate) SetConstraint(v string) {
	o.Constraint = v
}

func (o ParameterTypeRuleCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParameterTypeRuleCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["constraint"] = o.Constraint
	return toSerialize, nil
}

type NullableParameterTypeRuleCreate struct {
	value *ParameterTypeRuleCreate
	isSet bool
}

func (v NullableParameterTypeRuleCreate) Get() *ParameterTypeRuleCreate {
	return v.value
}

func (v *NullableParameterTypeRuleCreate) Set(val *ParameterTypeRuleCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterTypeRuleCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterTypeRuleCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterTypeRuleCreate(val *ParameterTypeRuleCreate) *NullableParameterTypeRuleCreate {
	return &NullableParameterTypeRuleCreate{value: val, isSet: true}
}

func (v NullableParameterTypeRuleCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterTypeRuleCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


