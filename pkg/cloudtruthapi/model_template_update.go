/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the TemplateUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateUpdate{}

// TemplateUpdate A parameter template in a given project, optionally instantiated against an environment.
type TemplateUpdate struct {
	Id string `json:"id"`
	// The template name.
	Name string `json:"name"`
	// ('A description of the template.  You may find it helpful to document how this template is used to assist others when they need to maintain software that uses this content.',)
	Description *string `json:"description,omitempty"`
	// If true, the `body` field has undergone evaluation.
	Evaluated bool `json:"evaluated"`
	// The content of the template.  Use mustache-style templating delimiters of `{{` and `}}` to reference parameter values by name for substitution into the template result.
	Body *string `json:"body,omitempty"`
	CreatedAt time.Time `json:"created_at"`
	ModifiedAt NullableTime `json:"modified_at"`
}

type _TemplateUpdate TemplateUpdate

// NewTemplateUpdate instantiates a new TemplateUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateUpdate(id string, name string, evaluated bool, createdAt time.Time, modifiedAt NullableTime) *TemplateUpdate {
	this := TemplateUpdate{}
	this.Id = id
	this.Name = name
	this.Evaluated = evaluated
	this.CreatedAt = createdAt
	this.ModifiedAt = modifiedAt
	return &this
}

// NewTemplateUpdateWithDefaults instantiates a new TemplateUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateUpdateWithDefaults() *TemplateUpdate {
	this := TemplateUpdate{}
	return &this
}

// GetId returns the Id field value
func (o *TemplateUpdate) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TemplateUpdate) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TemplateUpdate) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *TemplateUpdate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TemplateUpdate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TemplateUpdate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TemplateUpdate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TemplateUpdate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TemplateUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetEvaluated returns the Evaluated field value
func (o *TemplateUpdate) GetEvaluated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Evaluated
}

// GetEvaluatedOk returns a tuple with the Evaluated field value
// and a boolean to check if the value has been set.
func (o *TemplateUpdate) GetEvaluatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Evaluated, true
}

// SetEvaluated sets field value
func (o *TemplateUpdate) SetEvaluated(v bool) {
	o.Evaluated = v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *TemplateUpdate) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateUpdate) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *TemplateUpdate) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *TemplateUpdate) SetBody(v string) {
	o.Body = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *TemplateUpdate) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *TemplateUpdate) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *TemplateUpdate) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetModifiedAt returns the ModifiedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *TemplateUpdate) GetModifiedAt() time.Time {
	if o == nil || o.ModifiedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.ModifiedAt.Get()
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TemplateUpdate) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedAt.Get(), o.ModifiedAt.IsSet()
}

// SetModifiedAt sets field value
func (o *TemplateUpdate) SetModifiedAt(v time.Time) {
	o.ModifiedAt.Set(&v)
}

func (o TemplateUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["evaluated"] = o.Evaluated
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["modified_at"] = o.ModifiedAt.Get()
	return toSerialize, nil
}

func (o *TemplateUpdate) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"evaluated",
		"created_at",
		"modified_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTemplateUpdate := _TemplateUpdate{}

	err = json.Unmarshal(bytes, &varTemplateUpdate)

	if err != nil {
		return err
	}

	*o = TemplateUpdate(varTemplateUpdate)

	return err
}

type NullableTemplateUpdate struct {
	value *TemplateUpdate
	isSet bool
}

func (v NullableTemplateUpdate) Get() *TemplateUpdate {
	return v.value
}

func (v *NullableTemplateUpdate) Set(val *TemplateUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateUpdate(val *TemplateUpdate) *NullableTemplateUpdate {
	return &NullableTemplateUpdate{value: val, isSet: true}
}

func (v NullableTemplateUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


