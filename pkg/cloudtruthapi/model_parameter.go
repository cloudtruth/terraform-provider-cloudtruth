/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
	"time"
)

// checks if the Parameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Parameter{}

// Parameter A single parameter inside of a project.
type Parameter struct {
	// The parameter url.
	Url string `json:"url"`
	Id string `json:"id"`
	LedgerId string `json:"ledger_id"`
	// The parameter name.
	Name string `json:"name"`
	Description *string `json:"description,omitempty"`
	Secret bool `json:"secret"`
	//          The type of this Parameter.  If not provided, this will default to         a string for Parameters that are not overrides or to the overridden         Parameter's type for Parameters that are overrides.         
	Type *string `json:"type,omitempty"`
	// Rules applied to this parameter.
	Rules []ParameterRule `json:"rules"`
	// The project url.
	Project string `json:"project"`
	// The project name that the parameter is within.
	ProjectName string `json:"project_name"`
	// Templates that reference this Parameter.  This field is not valid for history requests.
	ReferencingTemplates []string `json:"referencing_templates"`
	// Dynamic values that reference this Parameter.  This field is not valid for history requests.
	ReferencingValues []string `json:"referencing_values"`
	//              This dictionary has keys that correspond to environment urls, and values             that correspond to the effective value for this parameter in that environment.             Each parameter has an effective value in every environment based on             project dependencies and environment inheritance.              The effective value is found by looking (within the keyed environment) up             the project dependencies by parameter name.  If a value is not found, the             parent environment is consulted with the same logic to locate a value.  It             is possible for there to be a `null` value record for an environment, which             means there is no value set; it is also possible for there to be a value record             with a `value` of `null`, which means the value was explicitly set to `null`.              If the value's parameter does not match the enclosing parameter (holding the             values array) then that value is flowing in through project dependencies.             Clients must recognize this in case the user asks to modify the value; in this             case the client must POST a new Value to the current parameter to override the             value coming in from the project dependency.              If the Value.environment matches the key, then it is an explicit value set for             that environment.  If they differ, the value was obtained from a parent             environment (directly or indirectly).  If the value is None then no value has             ever been set in any environment for this parameter within all the project             dependencies.         
	Values map[string]Value `json:"values"`
	//          Identical to values, except the dictionary is flattened to a list.         Note that in this case, the environment in the Value is the environment         asked for, not the environment where it was obtained.         
	ValuesFlat []Value `json:"values_flat"`
	// If this parameter's project depends on another project which provides a parameter of the same name, this parameter overrides the one provided by the dependee.  You can use this field to determine if there will be side-effects the user should know about when deleting a parameter.  Deleting a parameter that overrides another one due to an identical name will uncover the one from the dependee project.
	Overrides NullableString `json:"overrides"`
	CreatedAt time.Time `json:"created_at"`
	ModifiedAt NullableTime `json:"modified_at"`
	Expires NullableString `json:"expires,omitempty"`
	ExpirationAction map[string]interface{} `json:"expiration_action,omitempty"`
	// If this parameter expires, the status of the last attempt to handle its expiration
	ExpiredStatus map[string]interface{} `json:"expired_status"`
}

// NewParameter instantiates a new Parameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameter(url string, id string, ledgerId string, name string, secret bool, rules []ParameterRule, project string, projectName string, referencingTemplates []string, referencingValues []string, values map[string]Value, valuesFlat []Value, overrides NullableString, createdAt time.Time, modifiedAt NullableTime, expiredStatus map[string]interface{}) *Parameter {
	this := Parameter{}
	this.Url = url
	this.Id = id
	this.LedgerId = ledgerId
	this.Name = name
	this.Secret = secret
	this.Rules = rules
	this.Project = project
	this.ProjectName = projectName
	this.ReferencingTemplates = referencingTemplates
	this.ReferencingValues = referencingValues
	this.Values = values
	this.ValuesFlat = valuesFlat
	this.Overrides = overrides
	this.CreatedAt = createdAt
	this.ModifiedAt = modifiedAt
	this.ExpiredStatus = expiredStatus
	return &this
}

// NewParameterWithDefaults instantiates a new Parameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParameterWithDefaults() *Parameter {
	this := Parameter{}
	return &this
}

// GetUrl returns the Url field value
func (o *Parameter) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Parameter) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Parameter) SetUrl(v string) {
	o.Url = v
}

// GetId returns the Id field value
func (o *Parameter) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Parameter) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Parameter) SetId(v string) {
	o.Id = v
}

// GetLedgerId returns the LedgerId field value
func (o *Parameter) GetLedgerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LedgerId
}

// GetLedgerIdOk returns a tuple with the LedgerId field value
// and a boolean to check if the value has been set.
func (o *Parameter) GetLedgerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LedgerId, true
}

// SetLedgerId sets field value
func (o *Parameter) SetLedgerId(v string) {
	o.LedgerId = v
}

// GetName returns the Name field value
func (o *Parameter) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Parameter) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Parameter) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Parameter) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parameter) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Parameter) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Parameter) SetDescription(v string) {
	o.Description = &v
}

// GetSecret returns the Secret field value
func (o *Parameter) GetSecret() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Secret
}

// GetSecretOk returns a tuple with the Secret field value
// and a boolean to check if the value has been set.
func (o *Parameter) GetSecretOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Secret, true
}

// SetSecret sets field value
func (o *Parameter) SetSecret(v bool) {
	o.Secret = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Parameter) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Parameter) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Parameter) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Parameter) SetType(v string) {
	o.Type = &v
}

// GetRules returns the Rules field value
func (o *Parameter) GetRules() []ParameterRule {
	if o == nil {
		var ret []ParameterRule
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *Parameter) GetRulesOk() ([]ParameterRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *Parameter) SetRules(v []ParameterRule) {
	o.Rules = v
}

// GetProject returns the Project field value
func (o *Parameter) GetProject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Project
}

// GetProjectOk returns a tuple with the Project field value
// and a boolean to check if the value has been set.
func (o *Parameter) GetProjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Project, true
}

// SetProject sets field value
func (o *Parameter) SetProject(v string) {
	o.Project = v
}

// GetProjectName returns the ProjectName field value
func (o *Parameter) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *Parameter) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *Parameter) SetProjectName(v string) {
	o.ProjectName = v
}

// GetReferencingTemplates returns the ReferencingTemplates field value
func (o *Parameter) GetReferencingTemplates() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ReferencingTemplates
}

// GetReferencingTemplatesOk returns a tuple with the ReferencingTemplates field value
// and a boolean to check if the value has been set.
func (o *Parameter) GetReferencingTemplatesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReferencingTemplates, true
}

// SetReferencingTemplates sets field value
func (o *Parameter) SetReferencingTemplates(v []string) {
	o.ReferencingTemplates = v
}

// GetReferencingValues returns the ReferencingValues field value
func (o *Parameter) GetReferencingValues() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ReferencingValues
}

// GetReferencingValuesOk returns a tuple with the ReferencingValues field value
// and a boolean to check if the value has been set.
func (o *Parameter) GetReferencingValuesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReferencingValues, true
}

// SetReferencingValues sets field value
func (o *Parameter) SetReferencingValues(v []string) {
	o.ReferencingValues = v
}

// GetValues returns the Values field value
func (o *Parameter) GetValues() map[string]Value {
	if o == nil {
		var ret map[string]Value
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *Parameter) GetValuesOk() (map[string]Value, bool) {
	if o == nil {
		return map[string]Value{}, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *Parameter) SetValues(v map[string]Value) {
	o.Values = v
}

// GetValuesFlat returns the ValuesFlat field value
func (o *Parameter) GetValuesFlat() []Value {
	if o == nil {
		var ret []Value
		return ret
	}

	return o.ValuesFlat
}

// GetValuesFlatOk returns a tuple with the ValuesFlat field value
// and a boolean to check if the value has been set.
func (o *Parameter) GetValuesFlatOk() ([]Value, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValuesFlat, true
}

// SetValuesFlat sets field value
func (o *Parameter) SetValuesFlat(v []Value) {
	o.ValuesFlat = v
}

// GetOverrides returns the Overrides field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Parameter) GetOverrides() string {
	if o == nil || o.Overrides.Get() == nil {
		var ret string
		return ret
	}

	return *o.Overrides.Get()
}

// GetOverridesOk returns a tuple with the Overrides field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Parameter) GetOverridesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Overrides.Get(), o.Overrides.IsSet()
}

// SetOverrides sets field value
func (o *Parameter) SetOverrides(v string) {
	o.Overrides.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *Parameter) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Parameter) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Parameter) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetModifiedAt returns the ModifiedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Parameter) GetModifiedAt() time.Time {
	if o == nil || o.ModifiedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.ModifiedAt.Get()
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Parameter) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedAt.Get(), o.ModifiedAt.IsSet()
}

// SetModifiedAt sets field value
func (o *Parameter) SetModifiedAt(v time.Time) {
	o.ModifiedAt.Set(&v)
}

// GetExpires returns the Expires field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Parameter) GetExpires() string {
	if o == nil || IsNil(o.Expires.Get()) {
		var ret string
		return ret
	}
	return *o.Expires.Get()
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Parameter) GetExpiresOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Expires.Get(), o.Expires.IsSet()
}

// HasExpires returns a boolean if a field has been set.
func (o *Parameter) HasExpires() bool {
	if o != nil && o.Expires.IsSet() {
		return true
	}

	return false
}

// SetExpires gets a reference to the given NullableString and assigns it to the Expires field.
func (o *Parameter) SetExpires(v string) {
	o.Expires.Set(&v)
}
// SetExpiresNil sets the value for Expires to be an explicit nil
func (o *Parameter) SetExpiresNil() {
	o.Expires.Set(nil)
}

// UnsetExpires ensures that no value is present for Expires, not even an explicit nil
func (o *Parameter) UnsetExpires() {
	o.Expires.Unset()
}

// GetExpirationAction returns the ExpirationAction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Parameter) GetExpirationAction() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.ExpirationAction
}

// GetExpirationActionOk returns a tuple with the ExpirationAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Parameter) GetExpirationActionOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExpirationAction) {
		return map[string]interface{}{}, false
	}
	return o.ExpirationAction, true
}

// HasExpirationAction returns a boolean if a field has been set.
func (o *Parameter) HasExpirationAction() bool {
	if o != nil && IsNil(o.ExpirationAction) {
		return true
	}

	return false
}

// SetExpirationAction gets a reference to the given map[string]interface{} and assigns it to the ExpirationAction field.
func (o *Parameter) SetExpirationAction(v map[string]interface{}) {
	o.ExpirationAction = v
}

// GetExpiredStatus returns the ExpiredStatus field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *Parameter) GetExpiredStatus() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ExpiredStatus
}

// GetExpiredStatusOk returns a tuple with the ExpiredStatus field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Parameter) GetExpiredStatusOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExpiredStatus) {
		return map[string]interface{}{}, false
	}
	return o.ExpiredStatus, true
}

// SetExpiredStatus sets field value
func (o *Parameter) SetExpiredStatus(v map[string]interface{}) {
	o.ExpiredStatus = v
}

func (o Parameter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Parameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["id"] = o.Id
	toSerialize["ledger_id"] = o.LedgerId
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["secret"] = o.Secret
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["rules"] = o.Rules
	toSerialize["project"] = o.Project
	toSerialize["project_name"] = o.ProjectName
	toSerialize["referencing_templates"] = o.ReferencingTemplates
	toSerialize["referencing_values"] = o.ReferencingValues
	toSerialize["values"] = o.Values
	toSerialize["values_flat"] = o.ValuesFlat
	toSerialize["overrides"] = o.Overrides.Get()
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["modified_at"] = o.ModifiedAt.Get()
	if o.Expires.IsSet() {
		toSerialize["expires"] = o.Expires.Get()
	}
	if o.ExpirationAction != nil {
		toSerialize["expiration_action"] = o.ExpirationAction
	}
	if o.ExpiredStatus != nil {
		toSerialize["expired_status"] = o.ExpiredStatus
	}
	return toSerialize, nil
}

type NullableParameter struct {
	value *Parameter
	isSet bool
}

func (v NullableParameter) Get() *Parameter {
	return v.value
}

func (v *NullableParameter) Set(val *Parameter) {
	v.value = val
	v.isSet = true
}

func (v NullableParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameter(val *Parameter) *NullableParameter {
	return &NullableParameter{value: val, isSet: true}
}

func (v NullableParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


