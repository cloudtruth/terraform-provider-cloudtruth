/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
	"fmt"
)

// NodeTypeEnum the model 'NodeTypeEnum'
type NodeTypeEnum string

// List of NodeTypeEnum
const (
	NODETYPEENUM_DIRECTORY NodeTypeEnum = "directory"
	NODETYPEENUM_FILE NodeTypeEnum = "file"
	NODETYPEENUM_VALUE NodeTypeEnum = "value"
)

// All allowed values of NodeTypeEnum enum
var AllowedNodeTypeEnumEnumValues = []NodeTypeEnum{
	"directory",
	"file",
	"value",
}

func (v *NodeTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NodeTypeEnum(value)
	for _, existing := range AllowedNodeTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NodeTypeEnum", value)
}

// NewNodeTypeEnumFromValue returns a pointer to a valid NodeTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNodeTypeEnumFromValue(v string) (*NodeTypeEnum, error) {
	ev := NodeTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NodeTypeEnum: valid values are %v", v, AllowedNodeTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NodeTypeEnum) IsValid() bool {
	for _, existing := range AllowedNodeTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NodeTypeEnum value
func (v NodeTypeEnum) Ptr() *NodeTypeEnum {
	return &v
}

type NullableNodeTypeEnum struct {
	value *NodeTypeEnum
	isSet bool
}

func (v NullableNodeTypeEnum) Get() *NodeTypeEnum {
	return v.value
}

func (v *NullableNodeTypeEnum) Set(val *NodeTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeTypeEnum(val *NodeTypeEnum) *NullableNodeTypeEnum {
	return &NullableNodeTypeEnum{value: val, isSet: true}
}

func (v NullableNodeTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

