/*
CloudTruth Management API

CloudTruth centralizes your configuration parameters and secrets making them easier to manage and use as a team.

API version: v1
Contact: support@cloudtruth.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudtruthapi

import (
	"encoding/json"
)

// BackupParameter Parameter, rule, and value data at a point in time.
type BackupParameter struct {
	Rules       map[string]BackupParameterRule        `json:"rules"`
	Values      map[string]BackupParameterValuesValue `json:"values"`
	Name        string                                `json:"name"`
	ParamType   string                                `json:"param_type"`
	Project     string                                `json:"project"`
	Secret      bool                                  `json:"secret"`
	Description NullableString                        `json:"description,omitempty"`
}

// NewBackupParameter instantiates a new BackupParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupParameter(rules map[string]BackupParameterRule, values map[string]BackupParameterValuesValue, name string, paramType string, project string, secret bool) *BackupParameter {
	this := BackupParameter{}
	this.Rules = rules
	this.Values = values
	this.Name = name
	this.ParamType = paramType
	this.Project = project
	this.Secret = secret
	return &this
}

// NewBackupParameterWithDefaults instantiates a new BackupParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupParameterWithDefaults() *BackupParameter {
	this := BackupParameter{}
	return &this
}

// GetRules returns the Rules field value
func (o *BackupParameter) GetRules() map[string]BackupParameterRule {
	if o == nil {
		var ret map[string]BackupParameterRule
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *BackupParameter) GetRulesOk() (*map[string]BackupParameterRule, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rules, true
}

// SetRules sets field value
func (o *BackupParameter) SetRules(v map[string]BackupParameterRule) {
	o.Rules = v
}

// GetValues returns the Values field value
func (o *BackupParameter) GetValues() map[string]BackupParameterValuesValue {
	if o == nil {
		var ret map[string]BackupParameterValuesValue
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *BackupParameter) GetValuesOk() (*map[string]BackupParameterValuesValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Values, true
}

// SetValues sets field value
func (o *BackupParameter) SetValues(v map[string]BackupParameterValuesValue) {
	o.Values = v
}

// GetName returns the Name field value
func (o *BackupParameter) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BackupParameter) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BackupParameter) SetName(v string) {
	o.Name = v
}

// GetParamType returns the ParamType field value
func (o *BackupParameter) GetParamType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParamType
}

// GetParamTypeOk returns a tuple with the ParamType field value
// and a boolean to check if the value has been set.
func (o *BackupParameter) GetParamTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParamType, true
}

// SetParamType sets field value
func (o *BackupParameter) SetParamType(v string) {
	o.ParamType = v
}

// GetProject returns the Project field value
func (o *BackupParameter) GetProject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Project
}

// GetProjectOk returns a tuple with the Project field value
// and a boolean to check if the value has been set.
func (o *BackupParameter) GetProjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Project, true
}

// SetProject sets field value
func (o *BackupParameter) SetProject(v string) {
	o.Project = v
}

// GetSecret returns the Secret field value
func (o *BackupParameter) GetSecret() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Secret
}

// GetSecretOk returns a tuple with the Secret field value
// and a boolean to check if the value has been set.
func (o *BackupParameter) GetSecretOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Secret, true
}

// SetSecret sets field value
func (o *BackupParameter) SetSecret(v bool) {
	o.Secret = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupParameter) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupParameter) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *BackupParameter) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *BackupParameter) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *BackupParameter) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *BackupParameter) UnsetDescription() {
	o.Description.Unset()
}

func (o BackupParameter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["rules"] = o.Rules
	}
	if true {
		toSerialize["values"] = o.Values
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["param_type"] = o.ParamType
	}
	if true {
		toSerialize["project"] = o.Project
	}
	if true {
		toSerialize["secret"] = o.Secret
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableBackupParameter struct {
	value *BackupParameter
	isSet bool
}

func (v NullableBackupParameter) Get() *BackupParameter {
	return v.value
}

func (v *NullableBackupParameter) Set(val *BackupParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupParameter(val *BackupParameter) *NullableBackupParameter {
	return &NullableBackupParameter{value: val, isSet: true}
}

func (v NullableBackupParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
